{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ofeki\\\\OneDrive\\\\\\u05E9\\u05D5\\u05DC\\u05D7\\u05DF \\u05D4\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4\\\\ExamApp design ver\\\\ExamsApp\\\\react_client_exams_app\\\\src\\\\components\\\\pages\\\\Admin\\\\MainPage\\\\Reports\\\\TestReport\\\\TestReport.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { SummaryTable } from '../../../../../Admin/SummaryTable/SummaryTable';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { GradesTable } from '../../../../../Admin/GradesTable/GradesTable';\nimport { QuestionStatisticsTable } from '../../../../../Admin/QuestionStatisticsTable/QuestionStatisticsTable';\nimport { Filter } from '../../../../../Admin/Filter/Filter';\nimport styles from './TestReport.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TestReport() {\n  _s();\n\n  // ----------------------------- Fetch Info Hooks ----------------------------\n  const [studentTests, setStudentTests] = useState(null);\n  const [questions, setQuestions] = useState(null);\n  const [test, setTest] = useState(null);\n  const [field, setField] = useState(\"\");\n  const [dateRange, setDateRange] = useState(\"\"); // const [ questions,          setQuestions              ] = useState([]);\n  // ------------------------------ Summary Hooks ------------------------------\n\n  const [numOfSubmissions, setNumOfSubmissions] = useState(0);\n  const [numPassed, setNumPassed] = useState(0);\n  const [passingPercentage, setPassingPercentage] = useState(0);\n  const [averageGrade, setAverageGrade] = useState(0);\n  const [medianGrade, setMedianGrade] = useState(0); // const [ numOfQuestions,      setNumOfQuestions      ] = useState(0);\n  // ------------------------------ Grades Hooks -------------------------------\n\n  const [respondentChosen, setRespondentChosen] = useState(false); // ---------------------------- Statistics Hooks -----------------------------\n  // const [ filterContent,      setFilterContent          ] = useState(\"\");\n\n  const [filterStatus, setFilter] = useState(false);\n  const [filterByTags, setFilterByTags] = useState(true);\n  const [filteredQuestions, setFilteredQuestions] = useState([]); // ---------------------------------------------------------------------------\n\n  const location = useLocation(); // for location state\n\n  const history = useHistory();\n\n  const back = () => {\n    history.goBack();\n  };\n\n  const exportToExecl = () => {};\n\n  const printReport = () => {}; // Returns element closest to target in arr[]\n\n\n  function findClosest(arr, target) {\n    let n = arr.length; // Corner cases\n\n    if (target <= arr[0]) return arr[0];\n    if (target >= arr[n - 1]) return arr[n - 1]; // Doing binary search\n\n    let i = 0,\n        j = n,\n        mid = 0;\n\n    while (i < j) {\n      mid = (i + j) / 2;\n      if (arr[mid] == target) return arr[mid]; // If target is less than array\n      // element,then search in left\n\n      if (target < arr[mid]) {\n        // If target is greater than previous\n        // to mid, return closest of two\n        if (mid > 0 && target > arr[mid - 1]) return getClosest(arr[mid - 1], arr[mid], target); // Repeat for left half\n\n        j = mid;\n      } // If target is greater than mid\n      else {\n        if (mid < n - 1 && target < arr[mid + 1]) return getClosest(arr[mid], arr[mid + 1], target);\n        i = mid + 1; // update i\n      }\n    } // Only single element left after search\n\n\n    return arr[mid];\n  } // Method to compare which one is the more close\n  // We find the closest by taking the difference\n  //  between the target and both values. It assumes\n  // that val2 is greater than val1 and target lies\n  // between these two.\n\n\n  function getClosest(val1, val2, target) {\n    if (target - val1 >= val2 - target) return val2;else return val1;\n  }\n\n  const scanThroughStudentTests = data => {\n    let passed = 0;\n    let submissions = 0;\n    data.map(studentTest => {\n      submissions++; // console.log(\"passing grade: \" + location.state.test.passingGrade);\n      // console.log(\"student grade: \" + studentTest.grade);\n\n      if (studentTest.grade >= location.state.test.passingGrade) passed++;\n      return studentTest;\n    });\n    setNumOfSubmissions(submissions);\n    setNumPassed(passed); // calc(totalGrades);     \n\n    calcAdditionalInformation(data, submissions);\n  };\n\n  const calcAdditionalInformation = (data, submissions) => {\n    let totalGrades = 0;\n    let gradesArray = [];\n    data.map(studentTest => {\n      gradesArray.push(studentTest.grade);\n      totalGrades += studentTest.grade;\n      return \"\";\n    }); // Calc passing percentage -> passed divide by total submissions (multiply by 100 to get the percentage)\n\n    setPassingPercentage(numPassed / submissions * 100); // Calc average grade -> total grades divide by total submissions\n\n    let average = totalGrades / submissions;\n    setAverageGrade(Math.round(average)); // Calc median grade ->\n\n    setMedianGrade(findClosest(gradesArray, average));\n  };\n\n  const countTestQuestions = () => {\n    let counter = 0;\n    test && test.questions.map(() => counter++);\n    return counter;\n  };\n\n  const handleFilterByChange = value => {\n    if (value === \"tags\") setFilterByTags(true);else if (value === \"content\") setFilterByTags(false);\n  };\n\n  const handleFilterContentChange = value => {\n    if (value === \"\") setFilter(false);else setFilter(true);\n    let newQuestionList = questions;\n    setFilteredQuestions(newQuestionList.filter(question => {\n      let contains = false;\n\n      if (filterByTags === true) {\n        question.tags.map(tag => {\n          if (tag.toLowerCase().includes(value)) contains = true;\n        });\n      } else {\n        if (question.title.toLowerCase().includes(value)) contains = true;\n      }\n\n      if (contains === true) return question;\n    }));\n  }; // This function gets the student ID from the child component and sets it as the chosen respondent\n\n\n  const handleRespondentClick = id => {\n    if (respondentChosen.studentID !== id) {\n      console.log(id);\n      setRespondentChosen(id);\n    }\n  };\n\n  const handleFetchStudentTests = data => {\n    console.log(\"handle fetch students tests\");\n    setStudentTests(data);\n    scanThroughStudentTests(data);\n  };\n\n  const fetchQuestions = () => {\n    fetch(\"http://localhost:8000/questions\", {\n      method: 'GET'\n    }).then(res => res.json()).then(data => {\n      setQuestions(data);\n      setFilteredQuestions(data);\n    }).catch(err => console.log('error fetching questions:' + err));\n  };\n\n  const fetchStudentTests = () => {\n    fetch(\"http://localhost:8000/studentTests\", {\n      method: 'GET'\n    }).then(res => res.json()).then(data => {\n      handleFetchStudentTests(data);\n    }).catch(err => console.log('error fetching student tests: ' + err));\n  };\n\n  useEffect(() => {\n    document.title = \"Test Report\";\n  }, []);\n  useEffect(() => {\n    let isMounted = true; // note mutable flag\n\n    if (isMounted) {\n      // add conditional check\n      fetchStudentTests();\n      fetchQuestions();\n    }\n\n    setField(location.state.field);\n    setDateRange(location.state.dateRange);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test_report noselect\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"headers__container\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" Test result for \", field, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"content__container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"summary__container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" Summary \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"summary_tables__container\",\n          children: location.state.test && /*#__PURE__*/_jsxDEV(SummaryTable, {\n            test: location.state.test,\n            dateRange: dateRange,\n            submissions: numOfSubmissions,\n            numPassed: numPassed,\n            passingPercentage: passingPercentage,\n            average: averageGrade,\n            median: medianGrade,\n            countNumberOfQuestions: countTestQuestions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"grades__container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" Respondent Grades and Answers \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"grades_table__container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \" Click a name from the list to see the respondent's test \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 25\n          }, this), studentTests && location.state.test && /*#__PURE__*/_jsxDEV(GradesTable, {\n            test: location.state.test,\n            studentTests: studentTests,\n            handleRespondentClick: handleRespondentClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 66\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"question_statistics__container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" Question Statistics \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \" Click a question to show statistics regarding it's answers, then click the answers to see which answer each respondent selected. \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \" You can use the following buttons to do the same with all the questions in the list. \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"filter__container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"filter_by__container\",\n            children: questions && filteredQuestions && /*#__PURE__*/_jsxDEV(Filter, {\n              filterStatus: filterStatus,\n              totalAmount: questions.length,\n              filteredAmount: filteredQuestions.length,\n              handleFilterByChange: handleFilterByChange,\n              handleFilterContentChange: handleFilterContentChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 65\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"question_statistics_table__container\",\n          children: studentTests && /*#__PURE__*/_jsxDEV(QuestionStatisticsTable, {\n            studentTest: studentTests\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"buttons__container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"regular__button\",\n            onClick: () => back(),\n            children: [\"             \", `<<`, \" Back         \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"regular__button\",\n            onClick: () => exportToExecl(),\n            children: \"    Export To Excel     \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"regular__button\",\n            onClick: () => printReport(),\n            children: \"      Print Report        \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TestReport, \"YyIJuz+I1xR7/KXwsMnZjHtYwPQ=\", false, function () {\n  return [useLocation, useHistory];\n});\n\n_c = TestReport;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestReport\");","map":{"version":3,"sources":["C:/Users/ofeki/OneDrive/שולחן העבודה/ExamApp design ver/ExamsApp/react_client_exams_app/src/components/pages/Admin/MainPage/Reports/TestReport/TestReport.js"],"names":["React","useEffect","useState","SummaryTable","useHistory","useLocation","GradesTable","QuestionStatisticsTable","Filter","styles","TestReport","studentTests","setStudentTests","questions","setQuestions","test","setTest","field","setField","dateRange","setDateRange","numOfSubmissions","setNumOfSubmissions","numPassed","setNumPassed","passingPercentage","setPassingPercentage","averageGrade","setAverageGrade","medianGrade","setMedianGrade","respondentChosen","setRespondentChosen","filterStatus","setFilter","filterByTags","setFilterByTags","filteredQuestions","setFilteredQuestions","location","history","back","goBack","exportToExecl","printReport","findClosest","arr","target","n","length","i","j","mid","getClosest","val1","val2","scanThroughStudentTests","data","passed","submissions","map","studentTest","grade","state","passingGrade","calcAdditionalInformation","totalGrades","gradesArray","push","average","Math","round","countTestQuestions","counter","handleFilterByChange","value","handleFilterContentChange","newQuestionList","filter","question","contains","tags","tag","toLowerCase","includes","title","handleRespondentClick","id","studentID","console","log","handleFetchStudentTests","fetchQuestions","fetch","method","then","res","json","catch","err","fetchStudentTests","document","isMounted"],"mappings":"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","sourcesContent":["import React,   { useEffect, useState       }           from 'react';\r\nimport          { SummaryTable              }           from '../../../../../Admin/SummaryTable/SummaryTable';\r\nimport          { useHistory, useLocation   }           from 'react-router-dom';\r\nimport          { GradesTable               }           from '../../../../../Admin/GradesTable/GradesTable';\r\nimport          { QuestionStatisticsTable   }           from '../../../../../Admin/QuestionStatisticsTable/QuestionStatisticsTable';\r\nimport          { Filter                    }           from '../../../../../Admin/Filter/Filter';\r\nimport styles                                           from './TestReport.css'\r\n\r\nexport default function TestReport() {\r\n\r\n    // ----------------------------- Fetch Info Hooks ----------------------------\r\n\r\n    const [ studentTests,       setStudentTests           ] = useState(null);\r\n    const [ questions,          setQuestions              ] = useState(null);\r\n\r\n    const [ test,               setTest                   ] = useState(null);\r\n    const [ field,              setField                  ] = useState(\"\");\r\n    const [ dateRange,          setDateRange              ] = useState(\"\");\r\n    // const [ questions,          setQuestions              ] = useState([]);\r\n    \r\n    // ------------------------------ Summary Hooks ------------------------------\r\n    \r\n    const [ numOfSubmissions,   setNumOfSubmissions       ] = useState(0);\r\n    const [ numPassed,          setNumPassed              ] = useState(0);\r\n    const [ passingPercentage,  setPassingPercentage      ] = useState(0);\r\n    const [ averageGrade,       setAverageGrade           ] = useState(0);\r\n    const [ medianGrade,        setMedianGrade            ] = useState(0);\r\n    // const [ numOfQuestions,      setNumOfQuestions      ] = useState(0);\r\n\r\n    // ------------------------------ Grades Hooks -------------------------------\r\n\r\n    const [ respondentChosen,   setRespondentChosen       ] = useState(false);\r\n\r\n    // ---------------------------- Statistics Hooks -----------------------------\r\n\r\n    // const [ filterContent,      setFilterContent          ] = useState(\"\");\r\n\r\n    const [ filterStatus,       setFilter                 ]  = useState(false);\r\n    const [ filterByTags,       setFilterByTags           ]  = useState(true);\r\n\r\n    const [ filteredQuestions,  setFilteredQuestions      ] = useState([]);\r\n\r\n    // ---------------------------------------------------------------------------\r\n\r\n    const location = useLocation(); // for location state\r\n    const history = useHistory();\r\n\r\n    const back = () => {\r\n        history.goBack();\r\n    }\r\n\r\n    const exportToExecl = () => {\r\n\r\n    }\r\n\r\n    const printReport = () => {\r\n\r\n    }\r\n\r\n    // Returns element closest to target in arr[]\r\n    function findClosest(arr, target)\r\n    {\r\n        let n = arr.length;\r\n    \r\n        // Corner cases\r\n        if (target <= arr[0])\r\n            return arr[0];\r\n        if (target >= arr[n - 1])\r\n            return arr[n - 1];\r\n    \r\n        // Doing binary search\r\n        let i = 0, j = n, mid = 0;\r\n        while (i < j)\r\n        {\r\n            mid = (i + j) / 2;\r\n    \r\n            if (arr[mid] == target)\r\n                return arr[mid];\r\n    \r\n            // If target is less than array\r\n            // element,then search in left\r\n            if (target < arr[mid])\r\n            {\r\n        \r\n                // If target is greater than previous\r\n                // to mid, return closest of two\r\n                if (mid > 0 && target > arr[mid - 1])\r\n                    return getClosest(arr[mid - 1],\r\n                                    arr[mid], target);\r\n                \r\n                // Repeat for left half\r\n                j = mid;             \r\n            }\r\n    \r\n            // If target is greater than mid\r\n            else\r\n            {\r\n                if (mid < n - 1 && target < arr[mid + 1])\r\n                    return getClosest(arr[mid],\r\n                                    arr[mid + 1],\r\n                                    target);               \r\n                i = mid + 1; // update i\r\n            }\r\n        }\r\n    \r\n        // Only single element left after search\r\n        return arr[mid];\r\n    }\r\n    \r\n    // Method to compare which one is the more close\r\n    // We find the closest by taking the difference\r\n    //  between the target and both values. It assumes\r\n    // that val2 is greater than val1 and target lies\r\n    // between these two.\r\n    function getClosest(val1, val2, target)\r\n    {\r\n        if (target - val1 >= val2 - target)\r\n            return val2;       \r\n        else\r\n            return val1;       \r\n    }\r\n\r\n\r\n    const scanThroughStudentTests = (data) => {\r\n        let passed = 0;\r\n        let submissions = 0;\r\n        data.map((studentTest) => {\r\n            submissions++;\r\n\r\n            // console.log(\"passing grade: \" + location.state.test.passingGrade);\r\n            // console.log(\"student grade: \" + studentTest.grade);\r\n            if (studentTest.grade >= location.state.test.passingGrade) passed++;\r\n            return studentTest;\r\n        });\r\n        setNumOfSubmissions(submissions);\r\n        setNumPassed(passed);\r\n\r\n        // calc(totalGrades);     \r\n        calcAdditionalInformation(data, submissions);\r\n    }\r\n\r\n    const calcAdditionalInformation = (data, submissions) => {\r\n        let totalGrades = 0;\r\n        let gradesArray = [];\r\n        data.map((studentTest) => {\r\n            gradesArray.push(studentTest.grade);\r\n            totalGrades += studentTest.grade;\r\n            return \"\";\r\n        });\r\n\r\n        // Calc passing percentage -> passed divide by total submissions (multiply by 100 to get the percentage)\r\n        setPassingPercentage( (numPassed / submissions) * 100 );\r\n\r\n        // Calc average grade -> total grades divide by total submissions\r\n        let average = totalGrades / submissions;\r\n        setAverageGrade(Math.round(average));\r\n\r\n        // Calc median grade ->\r\n        setMedianGrade(findClosest(gradesArray, average));\r\n\r\n    }\r\n    \r\n    const countTestQuestions = () => {\r\n        let counter = 0;\r\n        test && test.questions.map(() => counter++);\r\n        return counter;\r\n    }\r\n\r\n    const handleFilterByChange = (value) => {\r\n        if (value === \"tags\") setFilterByTags(true);\r\n        else if (value === \"content\") setFilterByTags(false);\r\n    }\r\n\r\n    const handleFilterContentChange = (value) => {\r\n        \r\n        if (value === \"\") setFilter(false);\r\n        else setFilter(true);\r\n\r\n        let newQuestionList = questions;\r\n        setFilteredQuestions(newQuestionList.filter((question) => { \r\n            \r\n            let contains = false;\r\n\r\n            if (filterByTags === true) {\r\n                question.tags.map((tag) => {\r\n                    if (tag.toLowerCase().includes(value)) contains = true;\r\n                });\r\n            } else {\r\n                if (question.title.toLowerCase().includes(value)) contains = true;\r\n            }\r\n\r\n            if (contains === true) return question;\r\n\r\n        }));\r\n    }\r\n\r\n    // This function gets the student ID from the child component and sets it as the chosen respondent\r\n    const handleRespondentClick = (id) => {\r\n        if (respondentChosen.studentID !== id) {\r\n            console.log(id);\r\n            setRespondentChosen(id);\r\n        }\r\n    }\r\n\r\n    const handleFetchStudentTests = (data) => {\r\n        console.log(\"handle fetch students tests\");\r\n        setStudentTests(data);\r\n        scanThroughStudentTests(data);\r\n    }\r\n\r\n    const fetchQuestions = () => {\r\n        fetch(\"http://localhost:8000/questions\", {\r\n          method: 'GET',\r\n        })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n            setQuestions(data)\r\n            setFilteredQuestions(data);\r\n        })\r\n        .catch((err) => console.log('error fetching questions:' + err))\r\n      }\r\n\r\n    const fetchStudentTests = () => {\r\n        fetch(\"http://localhost:8000/studentTests\", {\r\n          method: 'GET',\r\n        })\r\n        .then((res) => res.json())\r\n        .then((data) => { \r\n            handleFetchStudentTests(data);\r\n         })\r\n        .catch((err) => console.log('error fetching student tests: ' + err));\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.title = \"Test Report\";\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let isMounted = true;           // note mutable flag\r\n\r\n        if (isMounted) {                // add conditional check\r\n            fetchStudentTests();\r\n            fetchQuestions();\r\n        }\r\n\r\n        setField(location.state.field);\r\n        setDateRange(location.state.dateRange);\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"test_report noselect\">\r\n            <div id=\"headers__container\">\r\n                <h1> Test result for {field} </h1>\r\n            </div>\r\n\r\n            <div id=\"content__container\">\r\n                <div id=\"summary__container\">\r\n                    <h1> Summary </h1>\r\n                    <div id=\"summary_tables__container\">\r\n                        { location.state.test && <SummaryTable test={location.state.test} dateRange={dateRange} submissions={numOfSubmissions} numPassed={numPassed} passingPercentage={passingPercentage}\r\n                            average={averageGrade} median={medianGrade} countNumberOfQuestions={countTestQuestions}/> }\r\n                    </div>\r\n                </div>\r\n                <div id=\"grades__container\">\r\n                    <h1> Respondent Grades and Answers </h1>\r\n                    <div id=\"grades_table__container\">\r\n                        <label> Click a name from the list to see the respondent's test </label>\r\n                        { studentTests && location.state.test && <GradesTable test={location.state.test} studentTests={studentTests} handleRespondentClick={handleRespondentClick}/> }\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"question_statistics__container\">\r\n                    <h1> Question Statistics </h1>\r\n                    <label> Click a question to show statistics regarding it's answers, then click the answers to see which answer each respondent selected. </label>\r\n                    <label> You can use the following buttons to do the same with all the questions in the list. </label>\r\n                    <div id=\"filter__container\">\r\n                        <div id=\"filter_by__container\">\r\n                            { questions && filteredQuestions && <Filter filterStatus={filterStatus} totalAmount={questions.length} filteredAmount={filteredQuestions.length} \r\n                                handleFilterByChange={handleFilterByChange} handleFilterContentChange={handleFilterContentChange}/> }\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"question_statistics_table__container\">\r\n                        { studentTests && <QuestionStatisticsTable studentTest={studentTests}/>}\r\n                    </div>\r\n\r\n                    <div id=\"buttons__container\">\r\n                        <button className=\"regular__button\" onClick={() => back()}>             {`<<`} Back         </button>\r\n                        <button className=\"regular__button\" onClick={() => exportToExecl()}>    Export To Excel     </button>\r\n                        <button className=\"regular__button\" onClick={() => printReport()}>      Print Report        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}