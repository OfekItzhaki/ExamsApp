{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ofeki\\\\OneDrive\\\\\\u05E9\\u05D5\\u05DC\\u05D7\\u05DF \\u05D4\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4\\\\ExamApp design ver\\\\ExamsApp\\\\react_client_exams_app\\\\src\\\\components\\\\pages\\\\Student\\\\Test\\\\Test.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { QuestionTable } from '../../../Admin/QuestionTable/QuestionTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Test() {\n  _s();\n\n  const [studentTests, setStudentTests] = useState(null);\n  const [questions, setQuestions] = useState(null);\n  const [test, setTest] = useState(\"\");\n  const [studentID, setStudentID] = useState(\"\");\n  const [fullName, setFullName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [grade, setGrade] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [summary, setSummary] = useState(\"\");\n  const [lastPage, setLastPage] = useState(false);\n  const [questionID, setQuestionID] = useState(0);\n  const [studentQuestions, setStudentQuestions] = useState([]);\n  const location = useLocation();\n  const history = useHistory();\n\n  const calcGrade = () => {\n    let grade = 0;\n    let numCorrectly = 0;\n    questions.map(question => {\n      studentQuestions.map(studentQuestion => {\n        if (question.questionID === studentQuestion.questionID) {\n          question.answers.map(answer => {\n            studentQuestion.answers.map(studentAnswer => {\n              if (answer.answerID === studentAnswer.answerID && answer.answerTitle === studentAnswer.answerTitle) {\n                console.log(\"answer is correct\");\n                numCorrectly++;\n              }\n            });\n          });\n        }\n      });\n    });\n    grade = Math.round(questions.length / numCorrectly * 100);\n    setGrade(grade);\n    if (grade >= test.passingGrade) setStatus(\"Passed\");else setStatus(\"Failed\");\n    if (numCorrectly > 0) setSummary(`You answered ${numCorrectly} questions correctly, out of ${questions.length} questions in total.`);else setSummary(`Out of ${questions.length} questions, You answered ${numCorrectly} correctly..`);\n  };\n\n  const handleQuestions = () => {};\n\n  const handleSubmit = event => {\n    console.log(\"handle submit\");\n    event.preventDefault();\n\n    if (submitTest()) {\n      history.push({\n        pathname: `/student/review-test`,\n        // search: '?update=true',  // query string\n        state: {\n          // location state\n          // update: true, \n          student: {\n            studentID: studentID,\n            fullName: fullName,\n            email: email\n          },\n          grade: grade,\n          status: status,\n          summary: summary,\n          passingGrade: test.passingGrade,\n          questions: studentQuestions\n        }\n      });\n    }\n  };\n\n  const submitTest = () => {\n    console.log(test.testID);\n    calcGrade();\n    fetch('http://localhost:8000/studentTests', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id: studentTests[studentTests.length - 1].stID + 1,\n        testID: test.testID,\n        studentID: studentID,\n        studentName: fullName,\n        grade: grade,\n        questions: studentQuestions,\n        submitted: Date.now()\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n      return true;\n    }).catch(err => {\n      console.log(`error ${err}`);\n      return false;\n    });\n  };\n\n  const fetchQuestions = () => {\n    fetch(\"http://localhost:8000/questions\", {\n      method: 'GET'\n    }).then(res => res.json()).then(data => {\n      setQuestions(data);\n    }).catch(err => console.log('error fetching questions:' + err));\n  }; // Meant for fetching the necessary information on first render\n\n\n  useEffect(() => {\n    document.title = \"State Test\";\n\n    if (location.state) {\n      if (location.state.test) {\n        console.log(location.state.test);\n        setTest(location.state.test);\n\n        if (location.state.test.questions) {\n          let questionArray = [];\n\n          if (questions) {\n            location.state.test.questions.map(testQuestion => {\n              questions.map(question => {\n                if (question.questionID === testQuestion.questionID) {\n                  questionArray.push(question);\n                }\n              });\n            });\n          }\n\n          setStudentQuestions(questionArray);\n        }\n      }\n\n      if (location.state.student) {\n        setStudentID(location.state.studentID);\n        setFullName(location.state.fullName);\n        setEmail(location.state.email);\n      }\n    }\n  }, [questions]);\n  useEffect(() => {\n    let isMounted = true; // note mutable flag\n\n    if (isMounted) {\n      // add conditional check \n      fetchQuestions();\n    }\n\n    return () => {\n      isMounted = false;\n    }; // cleanup toggles value, if unmounted\n  }, []);\n  useEffect(() => {\n    if (studentQuestions) {// studentTests.map((studentTest, i) => {\n      // // if (studentTest.questions[i].questionID === data[i].questionID) {\n      // //     if ()\n      // // } \n      // })\n    }\n  }, [studentQuestions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test noselect\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \" Please complete the following form to begin: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"test__form\",\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"test__container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"test_questions__container\",\n          children: studentQuestions && studentQuestions.map(question => {\n            /*#__PURE__*/\n            _jsxDEV(\"li\", {\n              children: [\" \", console.log(question.questionTitle), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"test_buttons__container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"previous_question\",\n            type: \"button\",\n            onClick: handleQuestions,\n            children: [\" \", `<<`, \" Previous Question \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"next_question\",\n            type: \"button\",\n            onClick: handleQuestions,\n            visibility: lastPage ? \"hidden\" : \"visible\",\n            children: [\" Next Question \", `>>`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"submit__button\",\n            type: \"submit\",\n            visibility: lastPage ? \"visible\" : \"hidden\",\n            children: \" Submit \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Test, \"zfqF+LuqdJxfyrcOcmYbz7L2NB4=\", false, function () {\n  return [useLocation, useHistory];\n});\n\n_c = Test;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["C:/Users/ofeki/OneDrive/שולחן העבודה/ExamApp design ver/ExamsApp/react_client_exams_app/src/components/pages/Student/Test/Test.js"],"names":["React","useEffect","useState","useHistory","useLocation","QuestionTable","Test","studentTests","setStudentTests","questions","setQuestions","test","setTest","studentID","setStudentID","fullName","setFullName","email","setEmail","grade","setGrade","status","setStatus","summary","setSummary","lastPage","setLastPage","questionID","setQuestionID","studentQuestions","setStudentQuestions","location","history","calcGrade","numCorrectly","map","question","studentQuestion","answers","answer","studentAnswer","answerID","answerTitle","console","log","Math","round","length","passingGrade","handleQuestions","handleSubmit","event","preventDefault","submitTest","push","pathname","state","student","testID","fetch","method","headers","body","JSON","stringify","id","stID","studentName","submitted","Date","now","then","res","json","data","catch","err","fetchQuestions","document","title","questionArray","testQuestion","isMounted","questionTitle"],"mappings":"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","sourcesContent":["import React, { useEffect, useState         }   from 'react';\r\nimport        { useHistory, useLocation     }   from 'react-router-dom';\r\nimport { QuestionTable } from '../../../Admin/QuestionTable/QuestionTable';\r\n\r\nexport default function Test() {\r\n\r\n    const [ studentTests,       setStudentTests     ] = useState(null);\r\n    const [ questions,          setQuestions        ] = useState(null);\r\n    \r\n    const [ test,               setTest             ] = useState(\"\");\r\n    const [ studentID,          setStudentID        ] = useState(\"\");\r\n    const [ fullName,           setFullName         ] = useState(\"\");\r\n    const [ email,              setEmail            ] = useState(\"\");\r\n    \r\n    const [ grade,              setGrade            ] = useState(\"\");\r\n    const [ status,             setStatus           ] = useState(\"\");\r\n    const [ summary,            setSummary          ] = useState(\"\");\r\n    \r\n    const [ lastPage,           setLastPage         ] = useState(false);\r\n    const [ questionID,         setQuestionID       ] = useState(0);\r\n    const [ studentQuestions,   setStudentQuestions ] = useState([]);\r\n\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    const calcGrade = () => {\r\n        let grade = 0;\r\n        let numCorrectly = 0;\r\n\r\n        questions.map((question) => {\r\n            studentQuestions.map((studentQuestion) => {\r\n                if (question.questionID === studentQuestion.questionID) {\r\n\r\n                    question.answers.map((answer) => {\r\n                        studentQuestion.answers.map((studentAnswer) => {\r\n                            if (answer.answerID === studentAnswer.answerID && answer.answerTitle === studentAnswer.answerTitle) {\r\n\r\n                                console.log(\"answer is correct\");\r\n                                numCorrectly++;\r\n                            }\r\n                        })\r\n                    })\r\n                }\r\n            })\r\n        })\r\n\r\n        grade = Math.round((questions.length / numCorrectly) * 100);\r\n        setGrade(grade);\r\n\r\n        if (grade >= test.passingGrade) setStatus(\"Passed\");\r\n        else setStatus(\"Failed\");\r\n\r\n        if (numCorrectly > 0) setSummary(`You answered ${numCorrectly} questions correctly, out of ${questions.length} questions in total.`);\r\n        else setSummary(`Out of ${questions.length} questions, You answered ${numCorrectly} correctly..`);\r\n    }\r\n\r\n    const handleQuestions = () => {\r\n\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        console.log(\"handle submit\");\r\n        event.preventDefault();\r\n\r\n        if (submitTest()) {\r\n\r\n            history.push({\r\n                pathname: `/student/review-test`,\r\n                // search: '?update=true',  // query string\r\n                state: {  // location state\r\n                    // update: true, \r\n                    student: {\r\n                        studentID: studentID,\r\n                        fullName: fullName,\r\n                        email: email\r\n                    },\r\n                    grade: grade,\r\n                    status: status,\r\n                    summary: summary,\r\n                    passingGrade: test.passingGrade,\r\n                    questions: studentQuestions\r\n                },\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    const submitTest = () => {\r\n        console.log(test.testID);\r\n\r\n        calcGrade();\r\n\r\n        fetch('http://localhost:8000/studentTests', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                id: studentTests[studentTests.length - 1].stID + 1,\r\n                testID: test.testID,\r\n                studentID: studentID,\r\n                studentName: fullName,\r\n                grade: grade,\r\n                questions: studentQuestions,\r\n                submitted: Date.now()\r\n            }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                console.log(data);\r\n                return true;\r\n            })\r\n            .catch((err) => {\r\n                console.log(`error ${err}`)\r\n                return false;\r\n            });\r\n    }\r\n\r\n    const fetchQuestions = () => {\r\n        fetch(\"http://localhost:8000/questions\", {\r\n            method: 'GET',\r\n        })\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                setQuestions(data);\r\n            })\r\n            .catch((err) => console.log('error fetching questions:' + err))\r\n    }\r\n\r\n    // Meant for fetching the necessary information on first render\r\n    useEffect(() => {\r\n        document.title = \"State Test\";\r\n\r\n        if (location.state) {\r\n            if (location.state.test) {\r\n                console.log(location.state.test)\r\n                setTest(location.state.test);\r\n\r\n                if (location.state.test.questions) {\r\n                    let questionArray = [];\r\n                    if (questions) {\r\n                        location.state.test.questions.map((testQuestion) => {\r\n                            questions.map((question) => {\r\n                                if (question.questionID === testQuestion.questionID) {\r\n                                    questionArray.push(question);\r\n                                }\r\n                            })\r\n                        })\r\n                    }\r\n\r\n                    setStudentQuestions(questionArray);\r\n                }\r\n            }\r\n\r\n            if (location.state.student) {\r\n                setStudentID(location.state.studentID);\r\n                setFullName(location.state.fullName);\r\n                setEmail(location.state.email);\r\n            }\r\n        }\r\n    }, [questions])\r\n\r\n\r\n    useEffect(() => {\r\n        let isMounted = true;           // note mutable flag\r\n\r\n        if (isMounted) {                // add conditional check \r\n            fetchQuestions();\r\n        }\r\n\r\n        return () => { isMounted = false }; // cleanup toggles value, if unmounted\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (studentQuestions) {\r\n            // studentTests.map((studentTest, i) => {\r\n            // // if (studentTest.questions[i].questionID === data[i].questionID) {\r\n            // //     if ()\r\n            // // } \r\n            // })\r\n        }\r\n\r\n    }, [studentQuestions])\r\n\r\n    return (\r\n        <div className=\"test noselect\">\r\n            <label> Please complete the following form to begin: </label>\r\n            <form id=\"test__form\" onSubmit={handleSubmit}>\r\n                <div id=\"test__container\">\r\n                    <div id=\"test_questions__container\">\r\n                        { studentQuestions && studentQuestions.map((question) => {\r\n                            <li> {console.log(question.questionTitle)} </li>\r\n                        })}\r\n                    </div>\r\n\r\n                    <div id=\"test_buttons__container\">\r\n                        <button id=\"previous_question\" type=\"button\" onClick={handleQuestions}> {`<<`} Previous Question </button>\r\n                        <button id=\"next_question\" type=\"button\" onClick={handleQuestions} visibility={lastPage ? \"hidden\" : \"visible\"}> Next Question {`>>`}</button>\r\n                        <button id=\"submit__button\" type=\"submit\" visibility={lastPage ? \"visible\" : \"hidden\"}> Submit </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n"]},"metadata":{},"sourceType":"module"}