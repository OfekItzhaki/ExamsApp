{"ast":null,"code":"import _slicedToArray from\"C:/Users/ofeki/OneDrive/\\u05E9\\u05D5\\u05DC\\u05D7\\u05DF \\u05D4\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4/ExamApp design ver/ExamsApp/react_client_exams_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{SummaryTable}from'../../../../../Admin/SummaryTable/SummaryTable';import{useHistory,useLocation}from'react-router-dom';import{GradesTable}from'../../../../../Admin/GradesTable/GradesTable';import{QuestionStatisticsTable}from'../../../../../Admin/QuestionStatisticsTable/QuestionStatisticsTable';import{Filter}from'../../../../../Admin/Filter/Filter';import styles from'./TestReport.css';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";export default function TestReport(){// ----------------------------- Fetch Info Hooks ----------------------------\nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),studentTests=_useState2[0],setStudentTests=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),questions=_useState4[0],setQuestions=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),test=_useState6[0],setTest=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),field=_useState8[0],setField=_useState8[1];var _useState9=useState(\"\"),_useState10=_slicedToArray(_useState9,2),dateRange=_useState10[0],setDateRange=_useState10[1];// const [ questions,          setQuestions              ] = useState([]);\n// ------------------------------ Summary Hooks ------------------------------\nvar _useState11=useState(0),_useState12=_slicedToArray(_useState11,2),numOfSubmissions=_useState12[0],setNumOfSubmissions=_useState12[1];var _useState13=useState(0),_useState14=_slicedToArray(_useState13,2),numPassed=_useState14[0],setNumPassed=_useState14[1];var _useState15=useState(0),_useState16=_slicedToArray(_useState15,2),passingPercentage=_useState16[0],setPassingPercentage=_useState16[1];var _useState17=useState(0),_useState18=_slicedToArray(_useState17,2),averageGrade=_useState18[0],setAverageGrade=_useState18[1];var _useState19=useState(0),_useState20=_slicedToArray(_useState19,2),medianGrade=_useState20[0],setMedianGrade=_useState20[1];// const [ numOfQuestions,      setNumOfQuestions      ] = useState(0);\n// ------------------------------ Grades Hooks -------------------------------\nvar _useState21=useState(false),_useState22=_slicedToArray(_useState21,2),respondentChosen=_useState22[0],setRespondentChosen=_useState22[1];// ---------------------------- Statistics Hooks -----------------------------\n// const [ filterContent,      setFilterContent          ] = useState(\"\");\nvar _useState23=useState(false),_useState24=_slicedToArray(_useState23,2),filterStatus=_useState24[0],setFilter=_useState24[1];var _useState25=useState(true),_useState26=_slicedToArray(_useState25,2),filterByTags=_useState26[0],setFilterByTags=_useState26[1];var _useState27=useState([]),_useState28=_slicedToArray(_useState27,2),filteredQuestions=_useState28[0],setFilteredQuestions=_useState28[1];// ---------------------------------------------------------------------------\nvar location=useLocation();// for location state\nvar history=useHistory();var back=function back(){history.goBack();};var exportToExecl=function exportToExecl(){};var printReport=function printReport(){};// Returns element closest to target in arr[]\nfunction findClosest(arr,target){var n=arr.length;// Corner cases\nif(target<=arr[0])return arr[0];if(target>=arr[n-1])return arr[n-1];// Doing binary search\nvar i=0,j=n,mid=0;while(i<j){mid=(i+j)/2;if(arr[mid]==target)return arr[mid];// If target is less than array\n// element,then search in left\nif(target<arr[mid]){// If target is greater than previous\n// to mid, return closest of two\nif(mid>0&&target>arr[mid-1])return getClosest(arr[mid-1],arr[mid],target);// Repeat for left half\nj=mid;}// If target is greater than mid\nelse{if(mid<n-1&&target<arr[mid+1])return getClosest(arr[mid],arr[mid+1],target);i=mid+1;// update i\n}}// Only single element left after search\nreturn arr[mid];}// Method to compare which one is the more close\n// We find the closest by taking the difference\n//  between the target and both values. It assumes\n// that val2 is greater than val1 and target lies\n// between these two.\nfunction getClosest(val1,val2,target){if(target-val1>=val2-target)return val2;else return val1;}var scanThroughStudentTests=function scanThroughStudentTests(data){var passed=0;var submissions=0;data.map(function(studentTest){submissions++;// console.log(\"passing grade: \" + location.state.test.passingGrade);\n// console.log(\"student grade: \" + studentTest.grade);\nif(studentTest.grade>=location.state.test.passingGrade)passed++;return studentTest;});setNumOfSubmissions(submissions);setNumPassed(passed);// calc(totalGrades);     \ncalcAdditionalInformation(data,submissions);};var calcAdditionalInformation=function calcAdditionalInformation(data,submissions){var totalGrades=0;var gradesArray=[];data.map(function(studentTest){gradesArray.push(studentTest.grade);totalGrades+=studentTest.grade;return\"\";});// Calc passing percentage -> passed divide by total submissions (multiply by 100 to get the percentage)\nsetPassingPercentage(numPassed/submissions*100);// Calc average grade -> total grades divide by total submissions\nvar average=totalGrades/submissions;setAverageGrade(Math.round(average));// Calc median grade ->\nsetMedianGrade(findClosest(gradesArray,average));};var countTestQuestions=function countTestQuestions(){var counter=0;test&&test.questions.map(function(){return counter++;});return counter;};var handleFilterByChange=function handleFilterByChange(value){if(value===\"tags\")setFilterByTags(true);else if(value===\"content\")setFilterByTags(false);};var handleFilterContentChange=function handleFilterContentChange(value){if(value===\"\")setFilter(false);else setFilter(true);var newQuestionList=questions;setFilteredQuestions(newQuestionList.filter(function(question){var contains=false;if(filterByTags===true){question.tags.map(function(tag){if(tag.toLowerCase().includes(value))contains=true;});}else{if(question.title.toLowerCase().includes(value))contains=true;}if(contains===true)return question;}));};// This function gets the student ID from the child component and sets it as the chosen respondent\nvar handleRespondentClick=function handleRespondentClick(id){if(respondentChosen.studentID!==id){console.log(id);setRespondentChosen(id);}};var handleFetchStudentTests=function handleFetchStudentTests(data){console.log(\"handle fetch students tests\");setStudentTests(data);scanThroughStudentTests(data);};var fetchQuestions=function fetchQuestions(){fetch(\"http://localhost:8000/questions\",{method:'GET'}).then(function(res){return res.json();}).then(function(data){setQuestions(data);setFilteredQuestions(data);}).catch(function(err){return console.log('error fetching questions:'+err);});};var fetchStudentTests=function fetchStudentTests(){fetch(\"http://localhost:8000/studentTests\",{method:'GET'}).then(function(res){return res.json();}).then(function(data){handleFetchStudentTests(data);}).catch(function(err){return console.log('error fetching student tests: '+err);});};useEffect(function(){document.title=\"Test Report\";},[]);useEffect(function(){var isMounted=true;// note mutable flag\nif(isMounted){// add conditional check\nfetchStudentTests();fetchQuestions();}if(location.state){if(location.state.field)setField(location.state.field);if(location.state.test)setTest(location.state.test);if(location.state.dateRange)setDateRange(location.state.dateRange);}},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"test_report noselect\",children:[/*#__PURE__*/_jsx(\"div\",{id:\"headers__container\",children:/*#__PURE__*/_jsxs(\"h1\",{children:[\" Test result for \",field,\" \"]})}),/*#__PURE__*/_jsxs(\"div\",{id:\"content__container\",children:[/*#__PURE__*/_jsxs(\"div\",{id:\"summary__container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\" Summary \"}),/*#__PURE__*/_jsx(\"div\",{id:\"summary_tables__container\",children:location.state.test&&/*#__PURE__*/_jsx(SummaryTable,{test:location.state.test,dateRange:dateRange,submissions:numOfSubmissions,numPassed:numPassed,passingPercentage:passingPercentage,average:averageGrade,median:medianGrade,countNumberOfQuestions:countTestQuestions})})]}),/*#__PURE__*/_jsxs(\"div\",{id:\"grades__container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\" Respondent Grades and Answers \"}),/*#__PURE__*/_jsxs(\"div\",{id:\"grades_table__container\",children:[/*#__PURE__*/_jsx(\"label\",{children:\" Click a name from the list to see the respondent's test \"}),studentTests&&location.state.test&&/*#__PURE__*/_jsx(GradesTable,{test:location.state.test,studentTests:studentTests,handleRespondentClick:handleRespondentClick})]})]}),/*#__PURE__*/_jsxs(\"div\",{id:\"question_statistics__container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\" Question Statistics \"}),/*#__PURE__*/_jsx(\"label\",{children:\" Click a question to show statistics regarding it's answers, then click the answers to see which answer each respondent selected. \"}),/*#__PURE__*/_jsx(\"label\",{children:\" You can use the following buttons to do the same with all the questions in the list. \"}),/*#__PURE__*/_jsx(\"div\",{id:\"filter__container\",children:/*#__PURE__*/_jsx(\"div\",{id:\"filter_by__container\",children:questions&&filteredQuestions&&/*#__PURE__*/_jsx(Filter,{filterStatus:filterStatus,totalAmount:questions.length,filteredAmount:filteredQuestions.length,handleFilterByChange:handleFilterByChange,handleFilterContentChange:handleFilterContentChange})})}),/*#__PURE__*/_jsx(\"div\",{id:\"question_statistics_table__container\",children:studentTests&&/*#__PURE__*/_jsx(QuestionStatisticsTable,{studentTests:studentTests,test:test})}),/*#__PURE__*/_jsxs(\"div\",{id:\"buttons__container\",children:[/*#__PURE__*/_jsxs(\"button\",{className:\"regular__button\",onClick:function onClick(){return back();},children:[\"             \",\"<<\",\" Back         \"]}),/*#__PURE__*/_jsx(\"button\",{className:\"regular__button\",onClick:function onClick(){return exportToExecl();},children:\"    Export To Excel     \"}),/*#__PURE__*/_jsx(\"button\",{className:\"regular__button\",onClick:function onClick(){return printReport();},children:\"      Print Report        \"})]})]})]})]});};","map":{"version":3,"sources":["C:/Users/ofeki/OneDrive/שולחן העבודה/ExamApp design ver/ExamsApp/react_client_exams_app/src/components/pages/Admin/MainPage/Reports/TestReport/TestReport.js"],"names":["React","useEffect","useState","SummaryTable","useHistory","useLocation","GradesTable","QuestionStatisticsTable","Filter","styles","TestReport","studentTests","setStudentTests","questions","setQuestions","test","setTest","field","setField","dateRange","setDateRange","numOfSubmissions","setNumOfSubmissions","numPassed","setNumPassed","passingPercentage","setPassingPercentage","averageGrade","setAverageGrade","medianGrade","setMedianGrade","respondentChosen","setRespondentChosen","filterStatus","setFilter","filterByTags","setFilterByTags","filteredQuestions","setFilteredQuestions","location","history","back","goBack","exportToExecl","printReport","findClosest","arr","target","n","length","i","j","mid","getClosest","val1","val2","scanThroughStudentTests","data","passed","submissions","map","studentTest","grade","state","passingGrade","calcAdditionalInformation","totalGrades","gradesArray","push","average","Math","round","countTestQuestions","counter","handleFilterByChange","value","handleFilterContentChange","newQuestionList","filter","question","contains","tags","tag","toLowerCase","includes","title","handleRespondentClick","id","studentID","console","log","handleFetchStudentTests","fetchQuestions","fetch","method","then","res","json","catch","err","fetchStudentTests","document","isMounted"],"mappings":"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","sourcesContent":["import React,   { useEffect, useState       }           from 'react';\r\nimport          { SummaryTable              }           from '../../../../../Admin/SummaryTable/SummaryTable';\r\nimport          { useHistory, useLocation   }           from 'react-router-dom';\r\nimport          { GradesTable               }           from '../../../../../Admin/GradesTable/GradesTable';\r\nimport          { QuestionStatisticsTable   }           from '../../../../../Admin/QuestionStatisticsTable/QuestionStatisticsTable';\r\nimport          { Filter                    }           from '../../../../../Admin/Filter/Filter';\r\nimport styles                                           from './TestReport.css'\r\n\r\nexport default function TestReport() {\r\n\r\n    // ----------------------------- Fetch Info Hooks ----------------------------\r\n\r\n    const [ studentTests,       setStudentTests           ] = useState(null);\r\n    const [ questions,          setQuestions              ] = useState(null);\r\n\r\n    const [ test,               setTest                   ] = useState(null);\r\n    const [ field,              setField                  ] = useState(\"\");\r\n    const [ dateRange,          setDateRange              ] = useState(\"\");\r\n    // const [ questions,          setQuestions              ] = useState([]);\r\n    \r\n    // ------------------------------ Summary Hooks ------------------------------\r\n    \r\n    const [ numOfSubmissions,   setNumOfSubmissions       ] = useState(0);\r\n    const [ numPassed,          setNumPassed              ] = useState(0);\r\n    const [ passingPercentage,  setPassingPercentage      ] = useState(0);\r\n    const [ averageGrade,       setAverageGrade           ] = useState(0);\r\n    const [ medianGrade,        setMedianGrade            ] = useState(0);\r\n    // const [ numOfQuestions,      setNumOfQuestions      ] = useState(0);\r\n\r\n    // ------------------------------ Grades Hooks -------------------------------\r\n\r\n    const [ respondentChosen,   setRespondentChosen       ] = useState(false);\r\n\r\n    // ---------------------------- Statistics Hooks -----------------------------\r\n\r\n    // const [ filterContent,      setFilterContent          ] = useState(\"\");\r\n\r\n    const [ filterStatus,       setFilter                 ] = useState(false);\r\n    const [ filterByTags,       setFilterByTags           ] = useState(true);\r\n\r\n    const [ filteredQuestions,  setFilteredQuestions      ] = useState([]);\r\n\r\n    // ---------------------------------------------------------------------------\r\n\r\n    const location = useLocation(); // for location state\r\n    const history = useHistory();\r\n\r\n    const back = () => {\r\n        history.goBack();\r\n    }\r\n\r\n    const exportToExecl = () => {\r\n\r\n    }\r\n\r\n    const printReport = () => {\r\n\r\n    }\r\n\r\n    // Returns element closest to target in arr[]\r\n    function findClosest(arr, target)\r\n    {\r\n        let n = arr.length;\r\n    \r\n        // Corner cases\r\n        if (target <= arr[0])\r\n            return arr[0];\r\n        if (target >= arr[n - 1])\r\n            return arr[n - 1];\r\n    \r\n        // Doing binary search\r\n        let i = 0, j = n, mid = 0;\r\n        while (i < j)\r\n        {\r\n            mid = (i + j) / 2;\r\n    \r\n            if (arr[mid] == target)\r\n                return arr[mid];\r\n    \r\n            // If target is less than array\r\n            // element,then search in left\r\n            if (target < arr[mid])\r\n            {\r\n        \r\n                // If target is greater than previous\r\n                // to mid, return closest of two\r\n                if (mid > 0 && target > arr[mid - 1])\r\n                    return getClosest(arr[mid - 1],\r\n                                    arr[mid], target);\r\n                \r\n                // Repeat for left half\r\n                j = mid;             \r\n            }\r\n    \r\n            // If target is greater than mid\r\n            else\r\n            {\r\n                if (mid < n - 1 && target < arr[mid + 1])\r\n                    return getClosest(arr[mid],\r\n                                    arr[mid + 1],\r\n                                    target);               \r\n                i = mid + 1; // update i\r\n            }\r\n        }\r\n    \r\n        // Only single element left after search\r\n        return arr[mid];\r\n    }\r\n    \r\n    // Method to compare which one is the more close\r\n    // We find the closest by taking the difference\r\n    //  between the target and both values. It assumes\r\n    // that val2 is greater than val1 and target lies\r\n    // between these two.\r\n    function getClosest(val1, val2, target)\r\n    {\r\n        if (target - val1 >= val2 - target)\r\n            return val2;       \r\n        else\r\n            return val1;       \r\n    }\r\n\r\n\r\n    const scanThroughStudentTests = (data) => {\r\n        let passed = 0;\r\n        let submissions = 0;\r\n        data.map((studentTest) => {\r\n            submissions++;\r\n\r\n            // console.log(\"passing grade: \" + location.state.test.passingGrade);\r\n            // console.log(\"student grade: \" + studentTest.grade);\r\n            if (studentTest.grade >= location.state.test.passingGrade) passed++;\r\n            return studentTest;\r\n        });\r\n        setNumOfSubmissions(submissions);\r\n        setNumPassed(passed);\r\n\r\n        // calc(totalGrades);     \r\n        calcAdditionalInformation(data, submissions);\r\n    }\r\n\r\n    const calcAdditionalInformation = (data, submissions) => {\r\n        let totalGrades = 0;\r\n        let gradesArray = [];\r\n        data.map((studentTest) => {\r\n            gradesArray.push(studentTest.grade);\r\n            totalGrades += studentTest.grade;\r\n            return \"\";\r\n        });\r\n\r\n        // Calc passing percentage -> passed divide by total submissions (multiply by 100 to get the percentage)\r\n        setPassingPercentage( (numPassed / submissions) * 100 );\r\n\r\n        // Calc average grade -> total grades divide by total submissions\r\n        let average = totalGrades / submissions;\r\n        setAverageGrade(Math.round(average));\r\n\r\n        // Calc median grade ->\r\n        setMedianGrade(findClosest(gradesArray, average));\r\n\r\n    }\r\n    \r\n    const countTestQuestions = () => {\r\n        let counter = 0;\r\n        test && test.questions.map(() => counter++);\r\n        return counter;\r\n    }\r\n\r\n    const handleFilterByChange = (value) => {\r\n        if (value === \"tags\") setFilterByTags(true);\r\n        else if (value === \"content\") setFilterByTags(false);\r\n    }\r\n\r\n    const handleFilterContentChange = (value) => {\r\n        \r\n        if (value === \"\") setFilter(false);\r\n        else setFilter(true);\r\n\r\n        let newQuestionList = questions;\r\n        setFilteredQuestions(newQuestionList.filter((question) => { \r\n            \r\n            let contains = false;\r\n\r\n            if (filterByTags === true) {\r\n                question.tags.map((tag) => {\r\n                    if (tag.toLowerCase().includes(value)) contains = true;\r\n                });\r\n            } else {\r\n                if (question.title.toLowerCase().includes(value)) contains = true;\r\n            }\r\n\r\n            if (contains === true) return question;\r\n\r\n        }));\r\n    }\r\n\r\n    // This function gets the student ID from the child component and sets it as the chosen respondent\r\n    const handleRespondentClick = (id) => {\r\n        if (respondentChosen.studentID !== id) {\r\n            console.log(id);\r\n            setRespondentChosen(id);\r\n        }\r\n    }\r\n\r\n    const handleFetchStudentTests = (data) => {\r\n        console.log(\"handle fetch students tests\");\r\n        setStudentTests(data);\r\n        scanThroughStudentTests(data);\r\n    }\r\n\r\n    const fetchQuestions = () => {\r\n        fetch(\"http://localhost:8000/questions\", {\r\n          method: 'GET',\r\n        })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n            setQuestions(data)\r\n            setFilteredQuestions(data);\r\n        })\r\n        .catch((err) => console.log('error fetching questions:' + err))\r\n      }\r\n\r\n    const fetchStudentTests = () => {\r\n        fetch(\"http://localhost:8000/studentTests\", {\r\n          method: 'GET',\r\n        })\r\n        .then((res) => res.json())\r\n        .then((data) => { \r\n            handleFetchStudentTests(data);\r\n         })\r\n        .catch((err) => console.log('error fetching student tests: ' + err));\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.title = \"Test Report\";\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let isMounted = true;           // note mutable flag\r\n\r\n        if (isMounted) {                // add conditional check\r\n            fetchStudentTests();\r\n            fetchQuestions();\r\n        }\r\n\r\n        if (location.state) {\r\n            if (location.state.field) setField(location.state.field);\r\n            if (location.state.test) setTest(location.state.test)\r\n            if (location.state.dateRange) setDateRange(location.state.dateRange);\r\n        }\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"test_report noselect\">\r\n            <div id=\"headers__container\">\r\n                <h1> Test result for {field} </h1>\r\n            </div>\r\n\r\n            <div id=\"content__container\">\r\n                <div id=\"summary__container\">\r\n                    <h1> Summary </h1>\r\n                    <div id=\"summary_tables__container\">\r\n                        { location.state.test && <SummaryTable test={location.state.test} dateRange={dateRange} submissions={numOfSubmissions} numPassed={numPassed} passingPercentage={passingPercentage}\r\n                            average={averageGrade} median={medianGrade} countNumberOfQuestions={countTestQuestions}/> }\r\n                    </div>\r\n                </div>\r\n                <div id=\"grades__container\">\r\n                    <h1> Respondent Grades and Answers </h1>\r\n                    <div id=\"grades_table__container\">\r\n                        <label> Click a name from the list to see the respondent's test </label>\r\n                        { studentTests && location.state.test && <GradesTable test={location.state.test} studentTests={studentTests} handleRespondentClick={handleRespondentClick}/> }\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"question_statistics__container\">\r\n                    <h1> Question Statistics </h1>\r\n                    <label> Click a question to show statistics regarding it's answers, then click the answers to see which answer each respondent selected. </label>\r\n                    <label> You can use the following buttons to do the same with all the questions in the list. </label>\r\n                    <div id=\"filter__container\">\r\n                        <div id=\"filter_by__container\">\r\n                            { questions && filteredQuestions && <Filter filterStatus={filterStatus} totalAmount={questions.length} filteredAmount={filteredQuestions.length} \r\n                                handleFilterByChange={handleFilterByChange} handleFilterContentChange={handleFilterContentChange}/> }\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"question_statistics_table__container\">\r\n                        { studentTests && <QuestionStatisticsTable studentTests={studentTests} test={test}/>}\r\n                    </div>\r\n\r\n                    <div id=\"buttons__container\">\r\n                        <button className=\"regular__button\" onClick={() => back()}>             {`<<`} Back         </button>\r\n                        <button className=\"regular__button\" onClick={() => exportToExecl()}>    Export To Excel     </button>\r\n                        <button className=\"regular__button\" onClick={() => printReport()}>      Print Report        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}