{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ofeki\\\\OneDrive\\\\\\u05E9\\u05D5\\u05DC\\u05D7\\u05DF \\u05D4\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4\\\\ExamApp design ver\\\\ExamsApp\\\\react_client_exams_app\\\\src\\\\components\\\\pages\\\\Student\\\\Test\\\\Test.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { QuestionTable } from '../../../Admin/QuestionTable/QuestionTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Test() {\n  _s();\n\n  const [studentTests, setStudentTests] = useState(null);\n  const [questions, setQuestions] = useState(null);\n  const [questionTypes, setQuestionTypes] = useState(null);\n  const [test, setTest] = useState(\"\");\n  const [studentID, setStudentID] = useState(\"\");\n  const [fullName, setFullName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [grade, setGrade] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [summary, setSummary] = useState(\"\");\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [studentQuestions, setStudentQuestions] = useState([]);\n  const [allBeenAnswered, setAllBeenAnswered] = useState(false);\n  const location = useLocation();\n  const history = useHistory();\n\n  const calcGrade = () => {\n    let grade = 0;\n    let numCorrectly = 0;\n    questions.map(question => {\n      studentQuestions.map(studentQuestion => {\n        if (question.questionID === studentQuestion.questionID) {\n          question.answers.map(answer => {\n            studentQuestion.answers.map(studentAnswer => {\n              if (answer.answerID === studentAnswer.answerID && answer.answerTitle === studentAnswer.answerTitle) {\n                console.log(\"answer is correct\");\n                numCorrectly++;\n              }\n            });\n          });\n        }\n      });\n    });\n    grade = Math.round(questions.length / numCorrectly * 100);\n    setGrade(grade);\n    if (grade >= test.passingGrade) setStatus(\"Passed\");else setStatus(\"Failed\");\n    if (numCorrectly > 0) setSummary(`You answered ${numCorrectly} questions correctly, out of ${questions.length} questions in total.`);else setSummary(`Out of ${questions.length} questions, You answered ${numCorrectly} correctly..`);\n  };\n\n  const handleQuickNav = (event, value) => {\n    event.preventDefault();\n    setCurrentIndex(value++);\n  };\n\n  const handleQuestions = (event, value) => {\n    event.preventDefault();\n    let lowerCase = value.toString().toLowerCase();\n\n    if (lowerCase.includes(\"next\")) {\n      if (currentIndex < questions.length - 1) setCurrentIndex(currentIndex + 1);\n    } else if (lowerCase.includes(\"previous\")) {\n      if (currentIndex > 0) setCurrentIndex(currentIndex - 1);\n    }\n  };\n\n  const handleSubmit = event => {\n    console.log(\"handle submit\");\n    event.preventDefault();\n\n    if (submitTest()) {\n      history.push({\n        pathname: `/student/review-test`,\n        // search: '?update=true',  // query string\n        state: {\n          // location state\n          // update: true, \n          student: {\n            studentID: studentID,\n            fullName: fullName,\n            email: email\n          },\n          grade: grade,\n          status: status,\n          summary: summary,\n          passingGrade: test.passingGrade,\n          questions: studentQuestions\n        }\n      });\n    }\n  };\n\n  const submitTest = () => {\n    console.log(test.testID);\n    console.log(allBeenAnswered);\n\n    if (allBeenAnswered) {\n      calcGrade();\n      fetch('http://localhost:8000/studentTests', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id: studentTests[studentTests.length - 1].stID + 1,\n          testID: test.testID,\n          studentID: studentID,\n          studentName: fullName,\n          grade: grade,\n          questions: studentQuestions,\n          submitted: Date.now()\n        })\n      }).then(res => res.json()).then(data => {\n        console.log(data);\n        return true;\n      }).catch(err => {\n        console.log(`error ${err}`);\n        return false;\n      });\n    }\n\n    return false;\n  };\n\n  const handleAnswerClick = id => {\n    console.log(\"handle answer click\"); // let newAnswers = answers;\n    // let amountCorrect = newAnswers.filter((answer) => answer.correct === true)\n    // newAnswers.filter((answer) => answer.answerID === id).map((answer) => {\n    //   if (amountCorrect.length <= 1) {\n    //     if (answer.correct === false) answer.correct = true;\n    //   }\n    //   else if (amountCorrect.length > 1 && amountCorrect.length < newAnswers.length - 1) {\n    //     answer.correct = !answer.correct;\n    //     console.log(`answer_${id} state - ${answer.correct}`);\n    //   }\n    //   else {\n    //     if (answer.correct === true) answer.correct = false;\n    //   }\n    //   return answer;\n    // });\n    // setAnswers(newAnswers);\n    // handlePossibleAnswersChange();\n\n    let temp = document.getElementById(`radio_${id}`).checked;\n    console.log(temp);\n\n    if (document.getElementById(`radio_${id}`).checked) {\n      document.getElementById(`radio_${id}`).unchecked = true;\n    } else {\n      document.getElementById(`radio_${id}`).checked = true;\n    }\n\n    console.log(temp);\n  };\n\n  const fetchQuestions = () => {\n    fetch(\"http://localhost:8000/questions\", {\n      method: 'GET'\n    }).then(res => res.json()).then(data => {\n      setQuestions(data);\n    }).catch(err => console.log('error fetching questions:' + err));\n  };\n\n  const fetchQuestionTypes = () => {\n    fetch(\"http://localhost:8000/questionTypes\", {\n      method: 'GET'\n    }).then(res => res.json()).then(data => {\n      setQuestionTypes(data);\n    }).catch(err => console.log('error fetching question types:' + err));\n  }; // Meant for fetching the necessary information on first render\n\n\n  useEffect(() => {\n    document.title = \"State Test\";\n\n    if (location.state) {\n      console.log(location.state);\n\n      if (location.state.test) {\n        setTest(location.state.test);\n\n        if (location.state.test.questions) {\n          let questionArray = [];\n\n          if (questions) {\n            location.state.test.questions.map(testQuestion => {\n              return questions.map(question => {\n                if (question.questionID === testQuestion.questionID) {\n                  questionArray.push({\n                    \"questionID\": question.questionID,\n                    \"questionTitle\": question.questionTitle,\n                    \"questionText\": question.questionText,\n                    \"questionType\": question.questionType,\n                    \"questionAnswers\": question.questionAnswers.map(answer => {\n                      return {\n                        \"answerID\": answer.answerID,\n                        \"answerTitle\": answer.answerTitle\n                      };\n                    }),\n                    \"chosenAnswers\": []\n                  });\n                }\n              });\n            });\n          }\n\n          setStudentQuestions(questionArray);\n        }\n      }\n\n      if (location.state.student) {\n        setStudentID(location.state.studentID);\n        setFullName(location.state.fullName);\n        setEmail(location.state.email);\n      }\n    }\n  }, [questions]);\n  useEffect(() => {\n    let isMounted = true; // note mutable flag\n\n    if (isMounted) {\n      // add conditional check \n      fetchQuestions();\n      fetchQuestionTypes();\n    }\n\n    return () => {\n      isMounted = false;\n    }; // cleanup toggles value, if unmounted\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test noselect\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \" Please complete the following form to begin: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"test__form\",\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"test__container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"test_questions__container\",\n          children: [studentQuestions && studentQuestions[currentIndex] && questionTypes && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: [\" \", studentQuestions[currentIndex].questionTitle, \" \"]\n            }, studentQuestions[currentIndex].questionID, true, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 29\n            }, this), studentQuestions[currentIndex].questionAnswers.map(answer => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"answers__container\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\" \", answer.answerTitle, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: `radio_${answer.answerID}`,\n                  name: studentQuestions[currentIndex].questionType ? studentQuestions[currentIndex].questionType === questionTypes[1] ? studentQuestions[currentIndex].questionType : \"\" : \"\",\n                  type: \"radio\",\n                  onClick: e => handleAnswerClick(answer.answerID)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 37\n              }, this);\n            })]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"test_buttons__container\",\n            children: [currentIndex > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"previous_question\",\n              type: \"button\",\n              onClick: e => handleQuestions(e, e.target.id),\n              children: [\" \", `<<`, \" Previous Question \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 51\n            }, this), studentQuestions && currentIndex < studentQuestions.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"next_question\",\n              type: \"button\",\n              onClick: e => handleQuestions(e, e.target.id),\n              children: [\" Next Question \", `>>`]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 97\n            }, this), studentQuestions && currentIndex === studentQuestions.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"submit_button\",\n              type: \"submit\",\n              children: \" Submit \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 99\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 21\n        }, this), studentQuestions && /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"quick_navigation__container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \" Quick Navigation: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 25\n          }, this), studentQuestions.map(question => {\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              id: question.questionID,\n              className: \"navigation_button\",\n              onClick: e => handleQuickNav(e, e.target.id),\n              children: [\" \", question.questionID + 1, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 33\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Test, \"9S1cfhC4fiAr2YWLHYWgfiBBmoE=\", false, function () {\n  return [useLocation, useHistory];\n});\n\n_c = Test;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["C:/Users/ofeki/OneDrive/שולחן העבודה/ExamApp design ver/ExamsApp/react_client_exams_app/src/components/pages/Student/Test/Test.js"],"names":["React","useEffect","useState","useHistory","useLocation","QuestionTable","Test","studentTests","setStudentTests","questions","setQuestions","questionTypes","setQuestionTypes","test","setTest","studentID","setStudentID","fullName","setFullName","email","setEmail","grade","setGrade","status","setStatus","summary","setSummary","currentIndex","setCurrentIndex","studentQuestions","setStudentQuestions","allBeenAnswered","setAllBeenAnswered","location","history","calcGrade","numCorrectly","map","question","studentQuestion","questionID","answers","answer","studentAnswer","answerID","answerTitle","console","log","Math","round","length","passingGrade","handleQuickNav","event","value","preventDefault","handleQuestions","lowerCase","toString","toLowerCase","includes","handleSubmit","submitTest","push","pathname","state","student","testID","fetch","method","headers","body","JSON","stringify","id","stID","studentName","submitted","Date","now","then","res","json","data","catch","err","handleAnswerClick","temp","document","getElementById","checked","unchecked","fetchQuestions","fetchQuestionTypes","title","questionArray","testQuestion","questionTitle","questionText","questionType","questionAnswers","isMounted","e","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAAqD,OAArD;AACA,SAAgBC,UAAhB,EAA4BC,WAA5B,QAAqD,kBAArD;AACA,SAASC,aAAT,QAA8B,4CAA9B;;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAE3B,QAAM,CAAEC,YAAF,EAAsBC,eAAtB,IAA8CN,QAAQ,CAAC,IAAD,CAA5D;AACA,QAAM,CAAEO,SAAF,EAAsBC,YAAtB,IAA8CR,QAAQ,CAAC,IAAD,CAA5D;AACA,QAAM,CAAES,aAAF,EAAsBC,gBAAtB,IAA8CV,QAAQ,CAAC,IAAD,CAA5D;AAEA,QAAM,CAAEW,IAAF,EAAsBC,OAAtB,IAA8CZ,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM,CAAEa,SAAF,EAAsBC,YAAtB,IAA8Cd,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM,CAAEe,QAAF,EAAsBC,WAAtB,IAA8ChB,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM,CAAEiB,KAAF,EAAsBC,QAAtB,IAA8ClB,QAAQ,CAAC,EAAD,CAA5D;AAEA,QAAM,CAAEmB,KAAF,EAAsBC,QAAtB,IAA8CpB,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM,CAAEqB,MAAF,EAAsBC,SAAtB,IAA8CtB,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM,CAAEuB,OAAF,EAAsBC,UAAtB,IAA8CxB,QAAQ,CAAC,EAAD,CAA5D;AAEA,QAAM,CAAEyB,YAAF,EAAsBC,eAAtB,IAA8C1B,QAAQ,CAAC,CAAD,CAA5D;AACA,QAAM,CAAE2B,gBAAF,EAAsBC,mBAAtB,IAA8C5B,QAAQ,CAAC,EAAD,CAA5D;AAEA,QAAM,CAAE6B,eAAF,EAAsBC,kBAAtB,IAA8C9B,QAAQ,CAAC,KAAD,CAA5D;AAEA,QAAM+B,QAAQ,GAAG7B,WAAW,EAA5B;AACA,QAAM8B,OAAO,GAAG/B,UAAU,EAA1B;;AAEA,QAAMgC,SAAS,GAAG,MAAM;AACpB,QAAId,KAAK,GAAG,CAAZ;AACA,QAAIe,YAAY,GAAG,CAAnB;AAEA3B,IAAAA,SAAS,CAAC4B,GAAV,CAAeC,QAAD,IAAc;AACxBT,MAAAA,gBAAgB,CAACQ,GAAjB,CAAsBE,eAAD,IAAqB;AACtC,YAAID,QAAQ,CAACE,UAAT,KAAwBD,eAAe,CAACC,UAA5C,EAAwD;AAEpDF,UAAAA,QAAQ,CAACG,OAAT,CAAiBJ,GAAjB,CAAsBK,MAAD,IAAY;AAC7BH,YAAAA,eAAe,CAACE,OAAhB,CAAwBJ,GAAxB,CAA6BM,aAAD,IAAmB;AAC3C,kBAAID,MAAM,CAACE,QAAP,KAAoBD,aAAa,CAACC,QAAlC,IAA8CF,MAAM,CAACG,WAAP,KAAuBF,aAAa,CAACE,WAAvF,EAAoG;AAEhGC,gBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAX,gBAAAA,YAAY;AACf;AACJ,aAND;AAOH,WARD;AASH;AACJ,OAbD;AAcH,KAfD;AAiBAf,IAAAA,KAAK,GAAG2B,IAAI,CAACC,KAAL,CAAYxC,SAAS,CAACyC,MAAV,GAAmBd,YAApB,GAAoC,GAA/C,CAAR;AACAd,IAAAA,QAAQ,CAACD,KAAD,CAAR;AAEA,QAAIA,KAAK,IAAIR,IAAI,CAACsC,YAAlB,EAAgC3B,SAAS,CAAC,QAAD,CAAT,CAAhC,KACKA,SAAS,CAAC,QAAD,CAAT;AAEL,QAAIY,YAAY,GAAG,CAAnB,EAAsBV,UAAU,CAAE,gBAAeU,YAAa,gCAA+B3B,SAAS,CAACyC,MAAO,sBAA9E,CAAV,CAAtB,KACKxB,UAAU,CAAE,UAASjB,SAAS,CAACyC,MAAO,4BAA2Bd,YAAa,cAApE,CAAV;AACR,GA7BD;;AA+BA,QAAMgB,cAAc,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACrCD,IAAAA,KAAK,CAACE,cAAN;AAEA3B,IAAAA,eAAe,CAAC0B,KAAK,EAAN,CAAf;AACH,GAJD;;AAMA,QAAME,eAAe,GAAG,CAACH,KAAD,EAAQC,KAAR,KAAkB;AACtCD,IAAAA,KAAK,CAACE,cAAN;AACA,QAAIE,SAAS,GAAGH,KAAK,CAACI,QAAN,GAAiBC,WAAjB,EAAhB;;AACA,QAAIF,SAAS,CAACG,QAAV,CAAmB,MAAnB,CAAJ,EAAgC;AAC5B,UAAIjC,YAAY,GAAGlB,SAAS,CAACyC,MAAV,GAAmB,CAAtC,EAAyCtB,eAAe,CAACD,YAAY,GAAG,CAAhB,CAAf;AAC5C,KAFD,MAEO,IAAI8B,SAAS,CAACG,QAAV,CAAmB,UAAnB,CAAJ,EAAoC;AACvC,UAAIjC,YAAY,GAAG,CAAnB,EAAsBC,eAAe,CAACD,YAAY,GAAG,CAAhB,CAAf;AACzB;AACJ,GARD;;AAUA,QAAMkC,YAAY,GAAIR,KAAD,IAAW;AAC5BP,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAM,IAAAA,KAAK,CAACE,cAAN;;AAEA,QAAIO,UAAU,EAAd,EAAkB;AAEd5B,MAAAA,OAAO,CAAC6B,IAAR,CAAa;AACTC,QAAAA,QAAQ,EAAG,sBADF;AAET;AACAC,QAAAA,KAAK,EAAE;AAAG;AACN;AACAC,UAAAA,OAAO,EAAE;AACLnD,YAAAA,SAAS,EAAEA,SADN;AAELE,YAAAA,QAAQ,EAAEA,QAFL;AAGLE,YAAAA,KAAK,EAAEA;AAHF,WAFN;AAOHE,UAAAA,KAAK,EAAEA,KAPJ;AAQHE,UAAAA,MAAM,EAAEA,MARL;AASHE,UAAAA,OAAO,EAAEA,OATN;AAUH0B,UAAAA,YAAY,EAAEtC,IAAI,CAACsC,YAVhB;AAWH1C,UAAAA,SAAS,EAAEoB;AAXR;AAHE,OAAb;AAiBH;AAEJ,GAzBD;;AA2BA,QAAMiC,UAAU,GAAG,MAAM;AACrBhB,IAAAA,OAAO,CAACC,GAAR,CAAYlC,IAAI,CAACsD,MAAjB;AACArB,IAAAA,OAAO,CAACC,GAAR,CAAYhB,eAAZ;;AAEA,QAAIA,eAAJ,EAAqB;AACjBI,MAAAA,SAAS;AAETiC,MAAAA,KAAK,CAAC,oCAAD,EAAuC;AACxCC,QAAAA,MAAM,EAAE,MADgC;AAExCC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAF+B;AAKxCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,UAAAA,EAAE,EAAEnE,YAAY,CAACA,YAAY,CAAC2C,MAAb,GAAsB,CAAvB,CAAZ,CAAsCyB,IAAtC,GAA6C,CADhC;AAEjBR,UAAAA,MAAM,EAAEtD,IAAI,CAACsD,MAFI;AAGjBpD,UAAAA,SAAS,EAAEA,SAHM;AAIjB6D,UAAAA,WAAW,EAAE3D,QAJI;AAKjBI,UAAAA,KAAK,EAAEA,KALU;AAMjBZ,UAAAA,SAAS,EAAEoB,gBANM;AAOjBgD,UAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAPM,SAAf;AALkC,OAAvC,CAAL,CAeKC,IAfL,CAeWC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAfnB,EAgBKF,IAhBL,CAgBWG,IAAD,IAAU;AACZrC,QAAAA,OAAO,CAACC,GAAR,CAAYoC,IAAZ;AACA,eAAO,IAAP;AACH,OAnBL,EAoBKC,KApBL,CAoBYC,GAAD,IAAS;AACZvC,QAAAA,OAAO,CAACC,GAAR,CAAa,SAAQsC,GAAI,EAAzB;AACA,eAAO,KAAP;AACH,OAvBL;AAwBH;;AAED,WAAO,KAAP;AAEH,GAnCD;;AAqCA,QAAMC,iBAAiB,GAAIZ,EAAD,IAAQ;AAC9B5B,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAD8B,CAE9B;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,QAAIwC,IAAI,GAAGC,QAAQ,CAACC,cAAT,CAAyB,SAAQf,EAAG,EAApC,EAAuCgB,OAAlD;AACA5C,IAAAA,OAAO,CAACC,GAAR,CAAYwC,IAAZ;;AACA,QAAIC,QAAQ,CAACC,cAAT,CAAyB,SAAQf,EAAG,EAApC,EAAuCgB,OAA3C,EAAoD;AAChDF,MAAAA,QAAQ,CAACC,cAAT,CAAyB,SAAQf,EAAG,EAApC,EAAuCiB,SAAvC,GAAmD,IAAnD;AACH,KAFD,MAGK;AACDH,MAAAA,QAAQ,CAACC,cAAT,CAAyB,SAAQf,EAAG,EAApC,EAAuCgB,OAAvC,GAAiD,IAAjD;AACH;;AACD5C,IAAAA,OAAO,CAACC,GAAR,CAAYwC,IAAZ;AACD,GAjCH;;AAmCA,QAAMK,cAAc,GAAG,MAAM;AACzBxB,IAAAA,KAAK,CAAC,iCAAD,EAAoC;AACrCC,MAAAA,MAAM,EAAE;AAD6B,KAApC,CAAL,CAGKW,IAHL,CAGWC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAHnB,EAIKF,IAJL,CAIWG,IAAD,IAAU;AACZzE,MAAAA,YAAY,CAACyE,IAAD,CAAZ;AACH,KANL,EAOKC,KAPL,CAOYC,GAAD,IAASvC,OAAO,CAACC,GAAR,CAAY,8BAA8BsC,GAA1C,CAPpB;AAQH,GATD;;AAWA,QAAMQ,kBAAkB,GAAG,MAAM;AAC7BzB,IAAAA,KAAK,CAAC,qCAAD,EAAwC;AAC3CC,MAAAA,MAAM,EAAE;AADmC,KAAxC,CAAL,CAGCW,IAHD,CAGOC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAHf,EAICF,IAJD,CAIOG,IAAD,IAAU;AACdvE,MAAAA,gBAAgB,CAACuE,IAAD,CAAhB;AACD,KAND,EAOCC,KAPD,CAOQC,GAAD,IAASvC,OAAO,CAACC,GAAR,CAAY,mCAAmCsC,GAA/C,CAPhB;AAQD,GATH,CApL2B,CA+L3B;;;AACApF,EAAAA,SAAS,CAAC,MAAM;AACZuF,IAAAA,QAAQ,CAACM,KAAT,GAAiB,YAAjB;;AAEA,QAAI7D,QAAQ,CAACgC,KAAb,EAAoB;AAChBnB,MAAAA,OAAO,CAACC,GAAR,CAAYd,QAAQ,CAACgC,KAArB;;AACA,UAAIhC,QAAQ,CAACgC,KAAT,CAAepD,IAAnB,EAAyB;AACrBC,QAAAA,OAAO,CAACmB,QAAQ,CAACgC,KAAT,CAAepD,IAAhB,CAAP;;AAEA,YAAIoB,QAAQ,CAACgC,KAAT,CAAepD,IAAf,CAAoBJ,SAAxB,EAAmC;AAC/B,cAAIsF,aAAa,GAAG,EAApB;;AAEA,cAAItF,SAAJ,EAAe;AACXwB,YAAAA,QAAQ,CAACgC,KAAT,CAAepD,IAAf,CAAoBJ,SAApB,CAA8B4B,GAA9B,CAAmC2D,YAAD,IAAkB;AAChD,qBACIvF,SAAS,CAAC4B,GAAV,CAAeC,QAAD,IAAc;AACxB,oBAAIA,QAAQ,CAACE,UAAT,KAAwBwD,YAAY,CAACxD,UAAzC,EAAqD;AACjDuD,kBAAAA,aAAa,CAAChC,IAAd,CAAmB;AACf,kCAAczB,QAAQ,CAACE,UADR;AAEf,qCAAiBF,QAAQ,CAAC2D,aAFX;AAGf,oCAAgB3D,QAAQ,CAAC4D,YAHV;AAIf,oCAAgB5D,QAAQ,CAAC6D,YAJV;AAKf,uCAAmB7D,QAAQ,CAAC8D,eAAT,CAAyB/D,GAAzB,CAA8BK,MAAD,IAAY;AACxD,6BAAO;AACH,oCAAYA,MAAM,CAACE,QADhB;AAEH,uCAAeF,MAAM,CAACG;AAFnB,uBAAP;AAIH,qBALkB,CALJ;AAWf,qCAAiB;AAXF,mBAAnB;AAaH;AACJ,eAhBD,CADJ;AAmBH,aApBD;AAqBH;;AAEDf,UAAAA,mBAAmB,CAACiE,aAAD,CAAnB;AACH;AACJ;;AAED,UAAI9D,QAAQ,CAACgC,KAAT,CAAeC,OAAnB,EAA4B;AACxBlD,QAAAA,YAAY,CAACiB,QAAQ,CAACgC,KAAT,CAAelD,SAAhB,CAAZ;AACAG,QAAAA,WAAW,CAACe,QAAQ,CAACgC,KAAT,CAAehD,QAAhB,CAAX;AACAG,QAAAA,QAAQ,CAACa,QAAQ,CAACgC,KAAT,CAAe9C,KAAhB,CAAR;AACH;AACJ;AACJ,GA7CQ,EA6CN,CAACV,SAAD,CA7CM,CAAT;AAgDAR,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIoG,SAAS,GAAG,IAAhB,CADY,CACoB;;AAEhC,QAAIA,SAAJ,EAAe;AAAiB;AAC5BT,MAAAA,cAAc;AACdC,MAAAA,kBAAkB;AACrB;;AAED,WAAO,MAAM;AAAEQ,MAAAA,SAAS,GAAG,KAAZ;AAAmB,KAAlC,CARY,CAQwB;AACvC,GATQ,EASN,EATM,CAAT;AAWA,sBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAM,MAAA,EAAE,EAAC,YAAT;AAAsB,MAAA,QAAQ,EAAExC,YAAhC;AAAA,6BACI;AAAK,QAAA,EAAE,EAAC,iBAAR;AAAA,gCACI;AAAK,UAAA,EAAE,EAAC,2BAAR;AAAA,qBAEMhC,gBAAgB,IAAIA,gBAAgB,CAACF,YAAD,CAApC,IAAsDhB,aAAtD,iBAAuE;AAAA,oCACrE;AAAA,8BAAsDkB,gBAAgB,CAACF,YAAD,CAAhB,CAA+BsE,aAArF;AAAA,eAASpE,gBAAgB,CAACF,YAAD,CAAhB,CAA+Ba,UAAxC;AAAA;AAAA;AAAA;AAAA,oBADqE,EAGnEX,gBAAgB,CAACF,YAAD,CAAhB,CAA+ByE,eAA/B,CAA+C/D,GAA/C,CAAoDK,MAAD,IAAY;AAE7D,kCACI;AAAK,gBAAA,EAAE,EAAC,oBAAR;AAAA,wCACI;AAAA,kCAASA,MAAM,CAACG,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAEI;AAAO,kBAAA,EAAE,EAAG,SAAQH,MAAM,CAACE,QAAS,EAApC;AAAuC,kBAAA,IAAI,EAAEf,gBAAgB,CAACF,YAAD,CAAhB,CAA+BwE,YAA/B,GAA+CtE,gBAAgB,CAACF,YAAD,CAAhB,CAA+BwE,YAA/B,KAAgDxF,aAAa,CAAC,CAAD,CAA7D,GAAmEkB,gBAAgB,CAACF,YAAD,CAAhB,CAA+BwE,YAAlG,GAAiH,EAAhK,GAAsK,EAAnN;AACI,kBAAA,IAAI,EAAC,OADT;AACiB,kBAAA,OAAO,EAAGG,CAAD,IAAOhB,iBAAiB,CAAC5C,MAAM,CAACE,QAAR;AADlD;AAAA;AAAA;AAAA;AAAA,wBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ;AAMH,aARC,CAHmE;AAAA,0BAF7E,eA+BI;AAAK,YAAA,EAAE,EAAC,yBAAR;AAAA,uBACMjB,YAAY,GAAG,CAAf,iBAAoB;AAAQ,cAAA,EAAE,EAAC,mBAAX;AAA+B,cAAA,IAAI,EAAC,QAApC;AAA6C,cAAA,OAAO,EAAG2E,CAAD,IAAO9C,eAAe,CAAC8C,CAAD,EAAIA,CAAC,CAACC,MAAF,CAAS7B,EAAb,CAA5E;AAAA,8BAAiG,IAAjG;AAAA;AAAA;AAAA;AAAA;AAAA,oBAD1B,EAEM7C,gBAAgB,IAAIF,YAAY,GAAGE,gBAAgB,CAACqB,MAAjB,GAA0B,CAA7D,iBAAkE;AAAQ,cAAA,EAAE,EAAC,eAAX;AAA2B,cAAA,IAAI,EAAC,QAAhC;AAAyC,cAAA,OAAO,EAAGoD,CAAD,IAAO9C,eAAe,CAAC8C,CAAD,EAAIA,CAAC,CAACC,MAAF,CAAS7B,EAAb,CAAxE;AAAA,4CAA2G,IAA3G;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFxE,EAGM7C,gBAAgB,IAAIF,YAAY,KAAKE,gBAAgB,CAACqB,MAAjB,GAA0B,CAA/D,iBAAoE;AAAQ,cAAA,EAAE,EAAC,eAAX;AAA2B,cAAA,IAAI,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAH1E;AAAA;AAAA;AAAA;AAAA;AAAA,kBA/BJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAuCMrB,gBAAgB,iBAAI;AAAK,UAAA,EAAE,EAAC,6BAAR;AAAA,kCAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADkB,EAEhBA,gBAAgB,CAACQ,GAAjB,CAAsBC,QAAD,IAAc;AACjC,gCACI;AAAQ,cAAA,EAAE,EAAEA,QAAQ,CAACE,UAArB;AAAiC,cAAA,SAAS,EAAC,mBAA3C;AAA+D,cAAA,OAAO,EAAG8D,CAAD,IAAOlD,cAAc,CAACkD,CAAD,EAAIA,CAAC,CAACC,MAAF,CAAS7B,EAAb,CAA7F;AAAA,8BAAiHpC,QAAQ,CAACE,UAAT,GAAsB,CAAvI;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ;AAGH,WAJC,CAFgB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAvC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAuDH;;GAlTuBlC,I;UAoBHF,W,EACDD,U;;;KArBIG,I;AAkTvB","sourcesContent":["import React, { useEffect, useState         }   from 'react';\r\nimport        { useHistory, useLocation     }   from 'react-router-dom';\r\nimport { QuestionTable } from '../../../Admin/QuestionTable/QuestionTable';\r\n\r\nexport default function Test() {\r\n\r\n    const [ studentTests,       setStudentTests     ] = useState(null);\r\n    const [ questions,          setQuestions        ] = useState(null);\r\n    const [ questionTypes,      setQuestionTypes    ] = useState(null);\r\n    \r\n    const [ test,               setTest             ] = useState(\"\");\r\n    const [ studentID,          setStudentID        ] = useState(\"\");\r\n    const [ fullName,           setFullName         ] = useState(\"\");\r\n    const [ email,              setEmail            ] = useState(\"\");\r\n    \r\n    const [ grade,              setGrade            ] = useState(\"\");\r\n    const [ status,             setStatus           ] = useState(\"\");\r\n    const [ summary,            setSummary          ] = useState(\"\");\r\n\r\n    const [ currentIndex,       setCurrentIndex     ] = useState(0);\r\n    const [ studentQuestions,   setStudentQuestions ] = useState([]);\r\n\r\n    const [ allBeenAnswered,    setAllBeenAnswered  ] = useState(false);\r\n\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    const calcGrade = () => {\r\n        let grade = 0;\r\n        let numCorrectly = 0;\r\n\r\n        questions.map((question) => {\r\n            studentQuestions.map((studentQuestion) => {\r\n                if (question.questionID === studentQuestion.questionID) {\r\n\r\n                    question.answers.map((answer) => {\r\n                        studentQuestion.answers.map((studentAnswer) => {\r\n                            if (answer.answerID === studentAnswer.answerID && answer.answerTitle === studentAnswer.answerTitle) {\r\n\r\n                                console.log(\"answer is correct\");\r\n                                numCorrectly++;\r\n                            }\r\n                        })\r\n                    })\r\n                }\r\n            })\r\n        })\r\n\r\n        grade = Math.round((questions.length / numCorrectly) * 100);\r\n        setGrade(grade);\r\n\r\n        if (grade >= test.passingGrade) setStatus(\"Passed\");\r\n        else setStatus(\"Failed\");\r\n\r\n        if (numCorrectly > 0) setSummary(`You answered ${numCorrectly} questions correctly, out of ${questions.length} questions in total.`);\r\n        else setSummary(`Out of ${questions.length} questions, You answered ${numCorrectly} correctly..`);\r\n    }\r\n\r\n    const handleQuickNav = (event, value) => {\r\n        event.preventDefault();\r\n\r\n        setCurrentIndex(value++);\r\n    }\r\n\r\n    const handleQuestions = (event, value) => {\r\n        event.preventDefault();\r\n        let lowerCase = value.toString().toLowerCase();\r\n        if (lowerCase.includes(\"next\")) {\r\n            if (currentIndex < questions.length - 1) setCurrentIndex(currentIndex + 1);\r\n        } else if (lowerCase.includes(\"previous\")) {\r\n            if (currentIndex > 0) setCurrentIndex(currentIndex - 1);\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        console.log(\"handle submit\");\r\n        event.preventDefault();\r\n\r\n        if (submitTest()) {\r\n\r\n            history.push({\r\n                pathname: `/student/review-test`,\r\n                // search: '?update=true',  // query string\r\n                state: {  // location state\r\n                    // update: true, \r\n                    student: {\r\n                        studentID: studentID,\r\n                        fullName: fullName,\r\n                        email: email\r\n                    },\r\n                    grade: grade,\r\n                    status: status,\r\n                    summary: summary,\r\n                    passingGrade: test.passingGrade,\r\n                    questions: studentQuestions\r\n                },\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    const submitTest = () => {\r\n        console.log(test.testID);\r\n        console.log(allBeenAnswered)\r\n\r\n        if (allBeenAnswered) {\r\n            calcGrade();\r\n    \r\n            fetch('http://localhost:8000/studentTests', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    id: studentTests[studentTests.length - 1].stID + 1,\r\n                    testID: test.testID,\r\n                    studentID: studentID,\r\n                    studentName: fullName,\r\n                    grade: grade,\r\n                    questions: studentQuestions,\r\n                    submitted: Date.now()\r\n                }),\r\n            })\r\n                .then((res) => res.json())\r\n                .then((data) => {\r\n                    console.log(data);\r\n                    return true;\r\n                })\r\n                .catch((err) => {\r\n                    console.log(`error ${err}`)\r\n                    return false;\r\n                });\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    const handleAnswerClick = (id) => {\r\n        console.log(\"handle answer click\");\r\n        // let newAnswers = answers;\r\n        // let amountCorrect = newAnswers.filter((answer) => answer.correct === true)\r\n        // newAnswers.filter((answer) => answer.answerID === id).map((answer) => {\r\n    \r\n        //   if (amountCorrect.length <= 1) {\r\n        //     if (answer.correct === false) answer.correct = true;\r\n        //   }\r\n    \r\n        //   else if (amountCorrect.length > 1 && amountCorrect.length < newAnswers.length - 1) {\r\n        //     answer.correct = !answer.correct;\r\n        //     console.log(`answer_${id} state - ${answer.correct}`);\r\n        //   }\r\n    \r\n        //   else {\r\n        //     if (answer.correct === true) answer.correct = false;\r\n        //   }\r\n    \r\n        //   return answer;\r\n        // });\r\n        // setAnswers(newAnswers);\r\n        // handlePossibleAnswersChange();\r\n\r\n        let temp = document.getElementById(`radio_${id}`).checked;\r\n        console.log(temp);\r\n        if (document.getElementById(`radio_${id}`).checked) {\r\n            document.getElementById(`radio_${id}`).unchecked = true;\r\n        }\r\n        else {\r\n            document.getElementById(`radio_${id}`).checked = true;\r\n        }\r\n        console.log(temp);\r\n      }\r\n\r\n    const fetchQuestions = () => {\r\n        fetch(\"http://localhost:8000/questions\", {\r\n            method: 'GET',\r\n        })\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                setQuestions(data);\r\n            })\r\n            .catch((err) => console.log('error fetching questions:' + err))\r\n    }\r\n\r\n    const fetchQuestionTypes = () => {\r\n        fetch(\"http://localhost:8000/questionTypes\", {\r\n          method: 'GET',\r\n        })\r\n        .then((res) => res.json())\r\n        .then((data) => { \r\n          setQuestionTypes(data);\r\n        })\r\n        .catch((err) => console.log('error fetching question types:' + err));\r\n      }\r\n\r\n    // Meant for fetching the necessary information on first render\r\n    useEffect(() => {\r\n        document.title = \"State Test\";\r\n\r\n        if (location.state) {\r\n            console.log(location.state)\r\n            if (location.state.test) {\r\n                setTest(location.state.test);\r\n\r\n                if (location.state.test.questions) {\r\n                    let questionArray = [];\r\n\r\n                    if (questions) {\r\n                        location.state.test.questions.map((testQuestion) => {\r\n                            return (\r\n                                questions.map((question) => {\r\n                                    if (question.questionID === testQuestion.questionID) {\r\n                                        questionArray.push({\r\n                                            \"questionID\": question.questionID,\r\n                                            \"questionTitle\": question.questionTitle,\r\n                                            \"questionText\": question.questionText,\r\n                                            \"questionType\": question.questionType,\r\n                                            \"questionAnswers\": question.questionAnswers.map((answer) => {\r\n                                                return({\r\n                                                    \"answerID\": answer.answerID,\r\n                                                    \"answerTitle\": answer.answerTitle\r\n                                                })\r\n                                            }),\r\n                                            \"chosenAnswers\": []\r\n                                        });\r\n                                    }\r\n                                })\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                    setStudentQuestions(questionArray);\r\n                }\r\n            }\r\n\r\n            if (location.state.student) {\r\n                setStudentID(location.state.studentID);\r\n                setFullName(location.state.fullName);\r\n                setEmail(location.state.email);\r\n            }\r\n        }\r\n    }, [questions])\r\n\r\n\r\n    useEffect(() => {\r\n        let isMounted = true;           // note mutable flag\r\n\r\n        if (isMounted) {                // add conditional check \r\n            fetchQuestions();\r\n            fetchQuestionTypes();\r\n        }\r\n\r\n        return () => { isMounted = false }; // cleanup toggles value, if unmounted\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"test noselect\">\r\n            <label> Please complete the following form to begin: </label>\r\n            <form id=\"test__form\" onSubmit={handleSubmit}>\r\n                <div id=\"test__container\">\r\n                    <div id=\"test_questions__container\">\r\n\r\n                        { studentQuestions && studentQuestions[currentIndex] && questionTypes && <>                        \r\n                            <h1 key={studentQuestions[currentIndex].questionID}> {studentQuestions[currentIndex].questionTitle} </h1>\r\n\r\n                            { studentQuestions[currentIndex].questionAnswers.map((answer) => {\r\n\r\n                                return (\r\n                                    <div id=\"answers__container\">\r\n                                        <label> {answer.answerTitle} </label>\r\n                                        <input id={`radio_${answer.answerID}`} name={studentQuestions[currentIndex].questionType ? (studentQuestions[currentIndex].questionType === questionTypes[1] ? studentQuestions[currentIndex].questionType : \"\") : \"\"} \r\n                                            type=\"radio\" onClick={(e) => handleAnswerClick(answer.answerID)} /> \r\n                                    </div> )\r\n                            })}\r\n                        </> }\r\n\r\n                        {/* { questionTypes && studentQuestions && studentQuestions.map((question) => {\r\n                            return (\r\n                                <>\r\n                                    <h1 key={question.questionID}> {question.questionTitle} </h1>\r\n\r\n                                    { question.questionAnswers.map((answer) => {\r\n                                        return (\r\n                                            <>\r\n                                                <label> {answer.answerTitle} </label>\r\n                                                <input id={`radio_${answer.answerID}`} name={question.questionType ? (question.questionType === questionTypes[1] ? question.questionType : \"\") : \"\"} type=\"radio\" onClick={(e) => handleAnswerClick(answer.answerID)} /> \r\n                                            </> )\r\n                                    })}\r\n                                </> )\r\n                        })} */}\r\n\r\n                        <div id=\"test_buttons__container\">\r\n                            { currentIndex > 0 && <button id=\"previous_question\" type=\"button\" onClick={(e) => handleQuestions(e, e.target.id)}> {`<<`} Previous Question </button> }\r\n                            { studentQuestions && currentIndex < studentQuestions.length - 1 && <button id=\"next_question\" type=\"button\" onClick={(e) => handleQuestions(e, e.target.id)}> Next Question {`>>`}</button> }\r\n                            { studentQuestions && currentIndex === studentQuestions.length - 1 && <button id=\"submit_button\" type=\"submit\"> Submit </button> }\r\n                        </div>\r\n                    </div>\r\n\r\n                    { studentQuestions && <div id=\"quick_navigation__container\">\r\n                        <label> Quick Navigation: </label>\r\n                        { studentQuestions.map((question) => {\r\n                            return (\r\n                                <button id={question.questionID} className=\"navigation_button\" onClick={(e) => handleQuickNav(e, e.target.id)}> {question.questionID + 1} </button>\r\n                            )\r\n                        })}\r\n                    </div> }\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n"]},"metadata":{},"sourceType":"module"}