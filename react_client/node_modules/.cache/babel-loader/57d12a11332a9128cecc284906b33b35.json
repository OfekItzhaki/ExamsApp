{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ofeki\\\\OneDrive\\\\\\u05E9\\u05D5\\u05DC\\u05D7\\u05DF \\u05D4\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4\\\\ExamApp design ver\\\\ExamsApp\\\\react_client_exams_app\\\\src\\\\components\\\\pages\\\\Student\\\\Test\\\\Test.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { QuestionTable } from '../../../Admin/QuestionTable/QuestionTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Test() {\n  _s();\n\n  const [studentTests, setStudentTests] = useState(null);\n  const [questions, setQuestions] = useState(null);\n  const [questionTypes, setQuestionTypes] = useState(null);\n  const [test, setTest] = useState(\"\");\n  const [studentID, setStudentID] = useState(\"\");\n  const [fullName, setFullName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [grade, setGrade] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [summary, setSummary] = useState(\"\");\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [studentQuestions, setStudentQuestions] = useState([]);\n  const [allBeenAnswered, setAllBeenAnswered] = useState(false);\n  const location = useLocation();\n  const history = useHistory();\n\n  const calcGrade = () => {\n    let grade = 0;\n    let numCorrectly = 0;\n    questions.map(question => {\n      studentQuestions.map(studentQuestion => {\n        if (question.questionID === studentQuestion.questionID) {\n          question.answers.map(answer => {\n            studentQuestion.answers.map(studentAnswer => {\n              if (answer.answerID === studentAnswer.answerID && answer.answerTitle === studentAnswer.answerTitle) {\n                console.log(\"answer is correct\");\n                numCorrectly++;\n              }\n            });\n          });\n        }\n      });\n    });\n    grade = Math.round(questions.length / numCorrectly * 100);\n    setGrade(grade);\n    if (grade >= test.passingGrade) setStatus(\"Passed\");else setStatus(\"Failed\");\n    if (numCorrectly > 0) setSummary(`You answered ${numCorrectly} questions correctly, out of ${questions.length} questions in total.`);else setSummary(`Out of ${questions.length} questions, You answered ${numCorrectly} correctly..`);\n  };\n\n  const handleQuestions = (event, value) => {\n    event.preventDefault();\n    let lowerCase = value.toString().toLowerCase();\n\n    if (lowerCase.includes(\"next\")) {\n      if (currentIndex < questions.length - 1) setCurrentIndex(currentIndex + 1);\n    } else if (lowerCase.includes(\"previous\")) {\n      if (currentIndex > 0) setCurrentIndex(currentIndex - 1);\n    }\n  };\n\n  const handleSubmit = event => {\n    console.log(\"handle submit\");\n    event.preventDefault();\n\n    if (submitTest()) {\n      history.push({\n        pathname: `/student/review-test`,\n        // search: '?update=true',  // query string\n        state: {\n          // location state\n          // update: true, \n          student: {\n            studentID: studentID,\n            fullName: fullName,\n            email: email\n          },\n          grade: grade,\n          status: status,\n          summary: summary,\n          passingGrade: test.passingGrade,\n          questions: studentQuestions\n        }\n      });\n    }\n  };\n\n  const submitTest = () => {\n    console.log(test.testID);\n    calcGrade();\n    fetch('http://localhost:8000/studentTests', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id: studentTests[studentTests.length - 1].stID + 1,\n        testID: test.testID,\n        studentID: studentID,\n        studentName: fullName,\n        grade: grade,\n        questions: studentQuestions,\n        submitted: Date.now()\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n      return true;\n    }).catch(err => {\n      console.log(`error ${err}`);\n      return false;\n    });\n  };\n\n  const handleAnswerClick = id => {\n    console.log(\"handle answer click\"); // let newAnswers = answers;\n    // let amountCorrect = newAnswers.filter((answer) => answer.correct === true)\n    // newAnswers.filter((answer) => answer.answerID === id).map((answer) => {\n    //   if (amountCorrect.length <= 1) {\n    //     if (answer.correct === false) answer.correct = true;\n    //   }\n    //   else if (amountCorrect.length > 1 && amountCorrect.length < newAnswers.length - 1) {\n    //     answer.correct = !answer.correct;\n    //     console.log(`answer_${id} state - ${answer.correct}`);\n    //   }\n    //   else {\n    //     if (answer.correct === true) answer.correct = false;\n    //   }\n    //   return answer;\n    // });\n    // setAnswers(newAnswers);\n    // handlePossibleAnswersChange();\n  };\n\n  const fetchQuestions = () => {\n    fetch(\"http://localhost:8000/questions\", {\n      method: 'GET'\n    }).then(res => res.json()).then(data => {\n      setQuestions(data);\n    }).catch(err => console.log('error fetching questions:' + err));\n  };\n\n  const fetchQuestionTypes = () => {\n    fetch(\"http://localhost:8000/questionTypes\", {\n      method: 'GET'\n    }).then(res => res.json()).then(data => {\n      setQuestionTypes(data);\n    }).catch(err => console.log('error fetching question types:' + err));\n  }; // Meant for fetching the necessary information on first render\n\n\n  useEffect(() => {\n    document.title = \"State Test\";\n\n    if (location.state) {\n      if (location.state.test) {\n        setTest(location.state.test);\n\n        if (location.state.test.questions) {\n          let questionArray = [];\n\n          if (questions) {\n            location.state.test.questions.map(testQuestion => {\n              questions.map(question => {\n                if (question.questionID === testQuestion.questionID) {\n                  questionArray.push({\n                    \"questionID\": question.questionID,\n                    \"questionTitle\": question.questionTitle,\n                    \"questionType\": question.questionType,\n                    \"questionAnswers\": question.questionAnswers.map(answer => {\n                      return {\n                        \"answerID\": answer.answerID,\n                        \"answerTitle\": answer.answerTitle\n                      };\n                    }),\n                    \"chosenAnswers\": []\n                  });\n                }\n              });\n            });\n          }\n\n          setStudentQuestions(questionArray);\n        }\n      }\n\n      if (location.state.student) {\n        setStudentID(location.state.studentID);\n        setFullName(location.state.fullName);\n        setEmail(location.state.email);\n      }\n    }\n  }, [questions]);\n  useEffect(() => {\n    let isMounted = true; // note mutable flag\n\n    if (isMounted) {\n      // add conditional check \n      fetchQuestions();\n      fetchQuestionTypes();\n    }\n\n    return () => {\n      isMounted = false;\n    }; // cleanup toggles value, if unmounted\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test noselect\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \" Please complete the following form to begin: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"test__form\",\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"test__container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"test_questions__container\",\n          children: [studentQuestions && studentQuestions[currentIndex] && questionTypes && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: [\" \", studentQuestions[currentIndex].questionTitle, \" \"]\n            }, studentQuestions[currentIndex].questionID, true, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 29\n            }, this), studentQuestions[currentIndex].questionAnswers.map(answer => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"answers__container\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\" \", answer.answerTitle, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: `radio_${answer.answerID}`,\n                  name: studentQuestions[currentIndex].questionType ? studentQuestions[currentIndex].questionType === questionTypes[1] ? studentQuestions[currentIndex].questionType : \"\" : \"\",\n                  type: \"radio\",\n                  onClick: e => handleAnswerClick(answer.answerID)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 37\n              }, this);\n            })]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"test_buttons__container\",\n            children: [currentIndex > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"previous_question\",\n              type: \"button\",\n              onClick: e => handleQuestions(e, e.target.id),\n              children: [\" \", `<<`, \" Previous Question \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 51\n            }, this), studentQuestions && currentIndex < studentQuestions.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"next_question\",\n              type: \"button\",\n              onClick: e => handleQuestions(e, e.target.id),\n              children: [\" Next Question \", `>>`]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 97\n            }, this), studentQuestions && currentIndex === studentQuestions.length - 1 && allBeenAnswered && /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"submit_button\",\n              type: \"submit\",\n              children: \" Submit \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 118\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 21\n        }, this), studentQuestions && /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"quick_navigation__container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \" Quick Navigation: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 25\n          }, this), studentQuestions.map(question => {\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"navigation_button\",\n              children: [\" \", question.questionID, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 33\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Test, \"9S1cfhC4fiAr2YWLHYWgfiBBmoE=\", false, function () {\n  return [useLocation, useHistory];\n});\n\n_c = Test;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["C:/Users/ofeki/OneDrive/שולחן העבודה/ExamApp design ver/ExamsApp/react_client_exams_app/src/components/pages/Student/Test/Test.js"],"names":["React","useEffect","useState","useHistory","useLocation","QuestionTable","Test","studentTests","setStudentTests","questions","setQuestions","questionTypes","setQuestionTypes","test","setTest","studentID","setStudentID","fullName","setFullName","email","setEmail","grade","setGrade","status","setStatus","summary","setSummary","currentIndex","setCurrentIndex","studentQuestions","setStudentQuestions","allBeenAnswered","setAllBeenAnswered","location","history","calcGrade","numCorrectly","map","question","studentQuestion","questionID","answers","answer","studentAnswer","answerID","answerTitle","console","log","Math","round","length","passingGrade","handleQuestions","event","value","preventDefault","lowerCase","toString","toLowerCase","includes","handleSubmit","submitTest","push","pathname","state","student","testID","fetch","method","headers","body","JSON","stringify","id","stID","studentName","submitted","Date","now","then","res","json","data","catch","err","handleAnswerClick","fetchQuestions","fetchQuestionTypes","document","title","questionArray","testQuestion","questionTitle","questionType","questionAnswers","isMounted","e","target"],"mappings":"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","sourcesContent":["import React, { useEffect, useState         }   from 'react';\r\nimport        { useHistory, useLocation     }   from 'react-router-dom';\r\nimport { QuestionTable } from '../../../Admin/QuestionTable/QuestionTable';\r\n\r\nexport default function Test() {\r\n\r\n    const [ studentTests,       setStudentTests     ] = useState(null);\r\n    const [ questions,          setQuestions        ] = useState(null);\r\n    const [ questionTypes,      setQuestionTypes    ] = useState(null);\r\n    \r\n    const [ test,               setTest             ] = useState(\"\");\r\n    const [ studentID,          setStudentID        ] = useState(\"\");\r\n    const [ fullName,           setFullName         ] = useState(\"\");\r\n    const [ email,              setEmail            ] = useState(\"\");\r\n    \r\n    const [ grade,              setGrade            ] = useState(\"\");\r\n    const [ status,             setStatus           ] = useState(\"\");\r\n    const [ summary,            setSummary          ] = useState(\"\");\r\n\r\n    const [ currentIndex,       setCurrentIndex     ] = useState(0);\r\n    const [ studentQuestions,   setStudentQuestions ] = useState([]);\r\n\r\n    const [ allBeenAnswered,    setAllBeenAnswered  ] = useState(false);\r\n\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    const calcGrade = () => {\r\n        let grade = 0;\r\n        let numCorrectly = 0;\r\n\r\n        questions.map((question) => {\r\n            studentQuestions.map((studentQuestion) => {\r\n                if (question.questionID === studentQuestion.questionID) {\r\n\r\n                    question.answers.map((answer) => {\r\n                        studentQuestion.answers.map((studentAnswer) => {\r\n                            if (answer.answerID === studentAnswer.answerID && answer.answerTitle === studentAnswer.answerTitle) {\r\n\r\n                                console.log(\"answer is correct\");\r\n                                numCorrectly++;\r\n                            }\r\n                        })\r\n                    })\r\n                }\r\n            })\r\n        })\r\n\r\n        grade = Math.round((questions.length / numCorrectly) * 100);\r\n        setGrade(grade);\r\n\r\n        if (grade >= test.passingGrade) setStatus(\"Passed\");\r\n        else setStatus(\"Failed\");\r\n\r\n        if (numCorrectly > 0) setSummary(`You answered ${numCorrectly} questions correctly, out of ${questions.length} questions in total.`);\r\n        else setSummary(`Out of ${questions.length} questions, You answered ${numCorrectly} correctly..`);\r\n    }\r\n\r\n    const handleQuestions = (event, value) => {\r\n        event.preventDefault();\r\n        let lowerCase = value.toString().toLowerCase();\r\n        if (lowerCase.includes(\"next\")) {\r\n            if (currentIndex < questions.length - 1) setCurrentIndex(currentIndex + 1);\r\n        } else if (lowerCase.includes(\"previous\")) {\r\n            if (currentIndex > 0) setCurrentIndex(currentIndex - 1);\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        console.log(\"handle submit\");\r\n        event.preventDefault();\r\n\r\n        if (submitTest()) {\r\n\r\n            history.push({\r\n                pathname: `/student/review-test`,\r\n                // search: '?update=true',  // query string\r\n                state: {  // location state\r\n                    // update: true, \r\n                    student: {\r\n                        studentID: studentID,\r\n                        fullName: fullName,\r\n                        email: email\r\n                    },\r\n                    grade: grade,\r\n                    status: status,\r\n                    summary: summary,\r\n                    passingGrade: test.passingGrade,\r\n                    questions: studentQuestions\r\n                },\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    const submitTest = () => {\r\n        console.log(test.testID);\r\n\r\n        calcGrade();\r\n\r\n        fetch('http://localhost:8000/studentTests', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                id: studentTests[studentTests.length - 1].stID + 1,\r\n                testID: test.testID,\r\n                studentID: studentID,\r\n                studentName: fullName,\r\n                grade: grade,\r\n                questions: studentQuestions,\r\n                submitted: Date.now()\r\n            }),\r\n        })\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                console.log(data);\r\n                return true;\r\n            })\r\n            .catch((err) => {\r\n                console.log(`error ${err}`)\r\n                return false;\r\n            });\r\n    }\r\n\r\n    const handleAnswerClick = (id) => {\r\n        console.log(\"handle answer click\");\r\n        // let newAnswers = answers;\r\n        // let amountCorrect = newAnswers.filter((answer) => answer.correct === true)\r\n        // newAnswers.filter((answer) => answer.answerID === id).map((answer) => {\r\n    \r\n        //   if (amountCorrect.length <= 1) {\r\n        //     if (answer.correct === false) answer.correct = true;\r\n        //   }\r\n    \r\n        //   else if (amountCorrect.length > 1 && amountCorrect.length < newAnswers.length - 1) {\r\n        //     answer.correct = !answer.correct;\r\n        //     console.log(`answer_${id} state - ${answer.correct}`);\r\n        //   }\r\n    \r\n        //   else {\r\n        //     if (answer.correct === true) answer.correct = false;\r\n        //   }\r\n    \r\n        //   return answer;\r\n        // });\r\n        // setAnswers(newAnswers);\r\n        // handlePossibleAnswersChange();\r\n      }\r\n\r\n    const fetchQuestions = () => {\r\n        fetch(\"http://localhost:8000/questions\", {\r\n            method: 'GET',\r\n        })\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                setQuestions(data);\r\n            })\r\n            .catch((err) => console.log('error fetching questions:' + err))\r\n    }\r\n\r\n    const fetchQuestionTypes = () => {\r\n        fetch(\"http://localhost:8000/questionTypes\", {\r\n          method: 'GET',\r\n        })\r\n        .then((res) => res.json())\r\n        .then((data) => { \r\n          setQuestionTypes(data);\r\n        })\r\n        .catch((err) => console.log('error fetching question types:' + err));\r\n      }\r\n\r\n    // Meant for fetching the necessary information on first render\r\n    useEffect(() => {\r\n        document.title = \"State Test\";\r\n\r\n        if (location.state) {\r\n            if (location.state.test) {\r\n                setTest(location.state.test);\r\n\r\n                if (location.state.test.questions) {\r\n                    let questionArray = [];\r\n\r\n                    if (questions) {\r\n                        location.state.test.questions.map((testQuestion) => {\r\n                            questions.map((question) => {\r\n                                if (question.questionID === testQuestion.questionID) {\r\n                                    questionArray.push({\r\n                                        \"questionID\": question.questionID,\r\n                                        \"questionTitle\": question.questionTitle,\r\n                                        \"questionType\": question.questionType,\r\n                                        \"questionAnswers\": question.questionAnswers.map((answer) => {\r\n                                            return({\r\n                                                \"answerID\": answer.answerID,\r\n                                                \"answerTitle\": answer.answerTitle\r\n                                            })\r\n                                        }),\r\n                                        \"chosenAnswers\": []\r\n                                    });\r\n                                }\r\n                            })\r\n                        })\r\n                    }\r\n\r\n                    setStudentQuestions(questionArray);\r\n                }\r\n            }\r\n\r\n            if (location.state.student) {\r\n                setStudentID(location.state.studentID);\r\n                setFullName(location.state.fullName);\r\n                setEmail(location.state.email);\r\n            }\r\n        }\r\n    }, [questions])\r\n\r\n\r\n    useEffect(() => {\r\n        let isMounted = true;           // note mutable flag\r\n\r\n        if (isMounted) {                // add conditional check \r\n            fetchQuestions();\r\n            fetchQuestionTypes();\r\n        }\r\n\r\n        return () => { isMounted = false }; // cleanup toggles value, if unmounted\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"test noselect\">\r\n            <label> Please complete the following form to begin: </label>\r\n            <form id=\"test__form\" onSubmit={handleSubmit}>\r\n                <div id=\"test__container\">\r\n                    <div id=\"test_questions__container\">\r\n\r\n                        { studentQuestions && studentQuestions[currentIndex] && questionTypes && <>                        \r\n                            <h1 key={studentQuestions[currentIndex].questionID}> {studentQuestions[currentIndex].questionTitle} </h1>\r\n\r\n                            { studentQuestions[currentIndex].questionAnswers.map((answer) => {\r\n\r\n                                return (\r\n                                    <div id=\"answers__container\">\r\n                                        <label> {answer.answerTitle} </label>\r\n                                        <input id={`radio_${answer.answerID}`} name={studentQuestions[currentIndex].questionType ? (studentQuestions[currentIndex].questionType === questionTypes[1] ? studentQuestions[currentIndex].questionType : \"\") : \"\"} type=\"radio\" onClick={(e) => handleAnswerClick(answer.answerID)} /> \r\n                                    </div> )\r\n                            })}\r\n                        </> }\r\n\r\n                        {/* { questionTypes && studentQuestions && studentQuestions.map((question) => {\r\n                            return (\r\n                                <>\r\n                                    <h1 key={question.questionID}> {question.questionTitle} </h1>\r\n\r\n                                    { question.questionAnswers.map((answer) => {\r\n                                        return (\r\n                                            <>\r\n                                                <label> {answer.answerTitle} </label>\r\n                                                <input id={`radio_${answer.answerID}`} name={question.questionType ? (question.questionType === questionTypes[1] ? question.questionType : \"\") : \"\"} type=\"radio\" onClick={(e) => handleAnswerClick(answer.answerID)} /> \r\n                                            </> )\r\n                                    })}\r\n                                </> )\r\n                        })} */}\r\n\r\n                        <div id=\"test_buttons__container\">\r\n                            { currentIndex > 0 && <button id=\"previous_question\"  type=\"button\" onClick={(e) => handleQuestions(e, e.target.id)}> {`<<`} Previous Question </button> }\r\n                            { studentQuestions && currentIndex < studentQuestions.length - 1 && <button id=\"next_question\"      type=\"button\" onClick={(e) => handleQuestions(e, e.target.id)}> Next Question {`>>`}</button> }\r\n                            { studentQuestions && currentIndex === studentQuestions.length - 1 && allBeenAnswered && <button id=\"submit_button\"     type=\"submit\"> Submit </button> }\r\n                        </div>\r\n                    </div>\r\n\r\n                    { studentQuestions && <div id=\"quick_navigation__container\">\r\n                        <label> Quick Navigation: </label>\r\n                        { studentQuestions.map((question) => {\r\n                            return (\r\n                                <button className=\"navigation_button\"> {question.questionID} </button>\r\n                            )\r\n                        })}\r\n                    </div> }\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n"]},"metadata":{},"sourceType":"module"}