{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ofeki\\\\OneDrive\\\\\\u05E9\\u05D5\\u05DC\\u05D7\\u05DF \\u05D4\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4\\\\ExamApp design ver\\\\ExamsApp\\\\react_client_exams_app\\\\src\\\\components\\\\Admin\\\\QuestionTable\\\\QuestionTable.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport styles from './QuestionTable.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const QuestionTable = ({\n  manageQuestions,\n  createEditTest,\n  questions,\n  filteredQuestions,\n  tests,\n  handleDelete,\n  handleEdit,\n  handleDuplicate,\n  handleShowSelected,\n  handleShowAll\n}) => {\n  _s();\n\n  const [visibility, setVisibility] = useState(false);\n\n  const handleNext = () => {};\n\n  const handleShow = (event, questionID) => {\n    event.preventDefault();\n    setVisibility(!visibility);\n  };\n\n  const handleQuestionClick = (event, questionID) => {\n    if (createEditTest) {\n      // Case question is selected\n      if (document.getElementById(`row_${questionID}`).className === \"space_under border_bottom\") {\n        document.getElementById(`row_${questionID}`).className = \"space_under border_bottom question_selected\";\n      } // Case question is unselected\n      else if (document.getElementById(`row_${questionID}`).className === \"space_under border_bottom question_selected\") {\n        document.getElementById(`row_${questionID}`).className = \"space_under border_bottom\";\n      }\n    }\n  };\n\n  let numOfTests = 0;\n  let currentPage = 1;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"questions__container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"table__container\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        id: \"questions__table\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [manageQuestions === true && /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"space_under header_row border_bottom\",\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \" ID                     \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \" Question Text and Tags \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \" Last Update            \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \" Question Type          \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \" # of Tests             \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 56\n          }, this), questions && questions.map((question, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            id: `row_${question.questionID}`,\n            className: \"space_under border_bottom\",\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"question_id\",\n              children: [\"  \", question.questionID, \" \"]\n            }, question.questionID, true, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"question_title_tags\",\n              onClick: e => handleQuestionClick(e, question.questionID),\n              children: [\" \", question.questionTitle, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                id: `text_${question.questionID}`,\n                className: \"question_text\",\n                visibility: visibility ? \"visible\" : \"hidden\",\n                children: [\" \", question.questionText, \" \"]\n              }, question.text, true, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 33\n              }, this), question.tags.map(tag => {\n                return /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"like_tag_button\",\n                    children: [\"      \", tag, \"                                                           \"]\n                  }, tag, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 58,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"like_link_label\",\n                    children: [\"                 \", tag !== question.tags[question.tags.length - 1] ? \" | \" : \"\", \"  \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 59,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true);\n              }), \" \"]\n            }, question.questionTitle, true, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 29\n            }, this), manageQuestions && /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"question_update\",\n              children: [\"      \", question.lastUpdate, \"               \"]\n            }, question.lastUpdate, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 50\n            }, this), manageQuestions && /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"question_type\",\n              children: [\"            \", question.questionType, \"             \"]\n            }, question.type, true, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 50\n            }, this), manageQuestions && tests && tests.map(test => {\n              /*#__PURE__*/\n              _jsxDEV(_Fragment, {\n                children: [test.questions.map(testQuestion => {\n                  // console.log(\"questionID - \" + question.questionID);\n                  // console.log(\"questionTitle - \" + question.questionName);\n                  // console.log(\"testID - \" + test.testID);\n                  // console.log(\"testQuestionID - \" + testQuestion.questionID);\n                  if (testQuestion.questionID === question.questionID) ++numOfTests; // console.log(\"numOfTests - \" + numOfTests);\n                  // console.log(\"--------------------------------\");\n\n                  return null;\n                }), \";\"]\n              }, void 0, true);\n\n              return null;\n            }), manageQuestions && /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\" \", numOfTests, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 50\n            }, this), manageQuestions && /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                display: \"none\"\n              },\n              children: [\" \", numOfTests = 0, \" \"]\n            }, \"hidden\", true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 50\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"buttons\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"regular__button\",\n                onClick: e => handleShow(e, question.questionID),\n                children: \"        Show   \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 33\n              }, this), handleEdit && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"regular__button\",\n                onClick: () => handleEdit(question.questionID),\n                children: \"        Edit   \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 56\n              }, this), handleDuplicate && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"regular__button\",\n                onClick: () => handleDuplicate(question.questionID),\n                children: \"   Duplicate   \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 56\n              }, this), handleDelete && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"regular__button\",\n                onClick: () => handleDelete(question.questionID),\n                children: \"      Delete   \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 56\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this)]\n          }, question, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"under_table__container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        type: \"text\",\n        id: \"showing_questions\",\n        children: [\" showing 1-\", filteredQuestions ? filteredQuestions.length : \"\", \" of filtered Questions \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this), handleNext && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"regular__button\",\n        onClick: () => handleNext(),\n        children: [\" Next \", currentPage + 1, \" \", `>>`, \"                                          \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 44\n      }, this), handleShowSelected && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"regular__button\",\n        onClick: () => handleShowSelected(),\n        children: \" Show Selected Only                                   \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 44\n      }, this), handleShowAll && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"regular__button\",\n        onClick: () => handleShowAll(),\n        children: [\" Show All \", questions && questions.length, \" questions   \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 44\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuestionTable, \"rcWpt7PlIHyEuY9yeiFLI0clZYY=\");\n\n_c = QuestionTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionTable\");","map":{"version":3,"sources":["C:/Users/ofeki/OneDrive/שולחן העבודה/ExamApp design ver/ExamsApp/react_client_exams_app/src/components/Admin/QuestionTable/QuestionTable.js"],"names":["useState","styles","QuestionTable","manageQuestions","createEditTest","questions","filteredQuestions","tests","handleDelete","handleEdit","handleDuplicate","handleShowSelected","handleShowAll","visibility","setVisibility","handleNext","handleShow","event","questionID","preventDefault","handleQuestionClick","document","getElementById","className","numOfTests","currentPage","map","question","i","e","questionTitle","questionText","text","tags","tag","length","lastUpdate","questionType","type","test","testQuestion","display"],"mappings":"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","sourcesContent":["import { useState }                 from 'react';\r\nimport styles                       from './QuestionTable.css';\r\n\r\nexport const QuestionTable = ({  manageQuestions, createEditTest, questions, filteredQuestions, tests, handleDelete, handleEdit, handleDuplicate, handleShowSelected, handleShowAll}) => {\r\n\r\n    const [ visibility, setVisibility ] = useState(false);\r\n\r\n    const handleNext = () => {\r\n        \r\n    }\r\n\r\n    const handleShow = (event, questionID) => {\r\n        event.preventDefault();\r\n        setVisibility(!visibility);\r\n    }\r\n\r\n    const handleQuestionClick = (event, questionID) => {\r\n        if (createEditTest) {\r\n            // Case question is selected\r\n            if (document.getElementById(`row_${questionID}`).className === \"space_under border_bottom\") {\r\n                document.getElementById(`row_${questionID}`).className = \"space_under border_bottom question_selected\";\r\n            }\r\n\r\n            // Case question is unselected\r\n            else if (document.getElementById(`row_${questionID}`).className === \"space_under border_bottom question_selected\") {\r\n                document.getElementById(`row_${questionID}`).className = \"space_under border_bottom\";\r\n            }\r\n        }\r\n    }\r\n\r\n    let numOfTests = 0;\r\n    let currentPage = 1;\r\n\r\n    return (\r\n        <div id=\"questions__container\">\r\n            <div id=\"table__container\">\r\n                <table id=\"questions__table\">\r\n                    <tbody>\r\n                        {  manageQuestions === true && <tr className=\"space_under header_row border_bottom\">\r\n                            <th> ID                     </th>\r\n                            <th> Question Text and Tags </th>\r\n                            <th> Last Update            </th>\r\n                            <th> Question Type          </th>\r\n                            <th> # of Tests             </th>\r\n                            <th></th>\r\n                        </tr> }\r\n                        \r\n\r\n                        { questions && questions.map((question, i) => (\r\n                        <tr id={`row_${question.questionID}`} className=\"space_under border_bottom\" key={question}>\r\n                            <td className=\"question_id\"           key={question.questionID}>  {question.questionID} </td>\r\n                            <td className=\"question_title_tags\"   key={question.questionTitle} onClick={(e) => handleQuestionClick(e, question.questionID)}> {question.questionTitle} \r\n                            <br/>\r\n                                <label id={`text_${question.questionID}`} className=\"question_text\"  key={question.text} visibility={visibility ? \"visible\" : \"hidden\"}> {question.questionText} </label>\r\n                                {question.tags.map((tag) => { \r\n                                    return (\r\n                                    <>\r\n                                        <button className=\"like_tag_button\" key={tag}>      {tag}                                                           </button> \r\n                                        <label className=\"like_link_label\">                 {tag !== question.tags[question.tags.length - 1] ? \" | \" : \"\"}  </label>\r\n                                    </>)\r\n                                })} </td>\r\n                            { manageQuestions && <td className=\"question_update\" key={question.lastUpdate}>      {question.lastUpdate}               </td> }\r\n                            { manageQuestions && <td className=\"question_type\"   key={question.type}>            {question.questionType}             </td> }\r\n\r\n                            { manageQuestions && tests && tests.map((test) => {\r\n                                <>\r\n                                    { test.questions.map((testQuestion) => {\r\n                                        // console.log(\"questionID - \" + question.questionID);\r\n                                        // console.log(\"questionTitle - \" + question.questionName);\r\n                                        // console.log(\"testID - \" + test.testID);\r\n                                        // console.log(\"testQuestionID - \" + testQuestion.questionID);\r\n\r\n                                        if (testQuestion.questionID === question.questionID) ++numOfTests;\r\n\r\n                                        // console.log(\"numOfTests - \" + numOfTests);\r\n                                        // console.log(\"--------------------------------\");\r\n\r\n                                        return null;\r\n                                    }) };\r\n                                </>\r\n\r\n                                return null;\r\n                            })}                    \r\n\r\n                            { manageQuestions && <td> { numOfTests } </td> }\r\n                            { manageQuestions && <td key=\"hidden\" style={{display: \"none\"}}> {  numOfTests = 0  } </td> }\r\n\r\n                            <td className=\"buttons\">\r\n                                <button className=\"regular__button\" onClick={(e) => handleShow(e, question.questionID)                          }>        Show   </button>\r\n                                { handleEdit        && <button className=\"regular__button\" onClick={() =>  handleEdit(question.questionID)      }>        Edit   </button> }\r\n                                { handleDuplicate   && <button className=\"regular__button\" onClick={() =>  handleDuplicate(question.questionID) }>   Duplicate   </button> }\r\n                                { handleDelete      && <button className=\"regular__button\" onClick={() =>  handleDelete(question.questionID)    }>      Delete   </button> }\r\n                            </td>\r\n                        </tr> ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div id=\"under_table__container\">\r\n            <label type=\"text\" id=\"showing_questions\"> showing 1-{filteredQuestions ? filteredQuestions.length : \"\"} of filtered Questions </label>\r\n                { handleNext            && <button className=\"regular__button\" onClick={() => handleNext()          }> Next {currentPage + 1} {`>>`}                                          </button> }\r\n                { handleShowSelected    && <button className=\"regular__button\" onClick={() => handleShowSelected()  }> Show Selected Only                                   </button> }\r\n                { handleShowAll         && <button className=\"regular__button\" onClick={() => handleShowAll()       }> Show All {questions && questions.length} questions   </button> }\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n"]},"metadata":{},"sourceType":"module"}